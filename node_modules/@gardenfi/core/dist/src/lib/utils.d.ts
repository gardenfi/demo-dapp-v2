import { Chain as viemChain } from 'viem/chains';
import { IBaseWallet } from '@catalogfi/wallets';
import { Chain, EvmChain, NetworkType } from '@gardenfi/orderbook';
import { WalletClient } from 'viem';
import { AsyncResult } from '@catalogfi/utils';

export declare const computeSecret: (fromChain: Chain, toChain: Chain, wallets: Partial<Record<Chain, IBaseWallet>>, nonce: number) => Promise<string>;
export declare const isFromChainBitcoin: (chain: Chain) => chain is "bitcoin" | "bitcoin_testnet" | "bitcoin_regtest";
/**
 * Given a hex string or a buffer, return the x-only pubkey. (removes y coordinate the prefix)
 */
export declare function xOnlyPubkey(pubkey: Buffer | string): Buffer;
export declare function assert(condition: boolean, message: string): void;
/**
 * concat the leaf version, the length of the script, and the script itself
 */
export declare function serializeScript(leafScript: Buffer): Buffer;
/**
 * concat the length of the script and the script itself
 */
export declare function prefixScriptLength(s: Buffer): Buffer;
export declare function sortLeaves(leaf1: Buffer, leaf2: Buffer): Buffer[];
export declare const toXOnly: (pubKey: string) => string;
export declare const isValidBitcoinPubKey: (pubKey: string) => boolean;
export declare const evmToViemChainMap: Record<EvmChain, viemChain>;
/**
 * Switches or adds a network to the wallet
 * @param chain Garden supported chain
 * @param walletClient
 * @returns new walletClient with updated chain
 */
export declare const switchOrAddNetwork: (chain: Chain, walletClient: WalletClient) => AsyncResult<{
    message: string;
    walletClient: WalletClient;
}, string>;
export declare const constructOrderPair: (sourceChain: Chain, sourceAsset: string, destChain: Chain, destAsset: string) => string;
export declare function validateBTCAddress(address: string, networkType: NetworkType): boolean;
