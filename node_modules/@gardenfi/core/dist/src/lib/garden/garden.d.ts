import { ISecretManager } from './../secretManager/secretManager.types';
import { AsyncResult } from '@catalogfi/utils';
import { GardenEvents, IGardenJS, SwapParams } from './garden.types';
import { MatchedOrder } from '@gardenfi/orderbook';
import { IAuth } from '@gardenfi/utils';
import { IQuote } from '../quote/quote.types';
import { WalletClient } from 'viem';
import { IBitcoinWallet } from '@catalogfi/wallets';
import { IBlockNumberFetcher } from './blockNumber';

export declare class Garden implements IGardenJS {
    private secretManager;
    private readonly eventListeners;
    private orderBook;
    private quote;
    private getOrderThreshold;
    private orderbookUrl;
    private auth;
    private useRelay;
    private wallets;
    private evmAddress;
    private orderExecutorCache;
    private blockNumberFetcher;
    constructor(config: {
        orderbookURl: string;
        secretManager: ISecretManager;
        quote: IQuote;
        auth: IAuth;
        wallets: {
            evmWallet: WalletClient;
            btcWallet?: IBitcoinWallet;
        };
        blockNumberFetcher?: IBlockNumberFetcher;
    });
    setUseRelay(useRelay: boolean): void;
    swap(params: SwapParams): AsyncResult<MatchedOrder, string>;
    private validateAndFillParams;
    private getAddresses;
    private validateAmount;
    private getTimelock;
    private pollOrder;
    execute(interval?: number): Promise<() => void>;
    private evmRedeem;
    private btcRedeem;
    private btcRefund;
    private getWallet;
    private emit;
    on<E extends keyof GardenEvents>(event: E, cb: GardenEvents[E]): void;
    off<E extends keyof GardenEvents>(event: E, cb: GardenEvents[E]): void;
    private fetchCurrentBlockNumbers;
    private assignOrderStatus;
}
