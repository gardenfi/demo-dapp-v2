import { Fetcher as u, Err as s, Ok as d } from "@catalogfi/utils";
import { Url as f, ApiStatus as g } from "@gardenfi/utils";
import { ConstructUrl as i } from "./index7.js";
class w {
  constructor(t) {
    this.url = new f("/orders", t);
  }
  async getOrder(t, o) {
    const e = o ? `/id/matched/${t}` : `/id/unmatched/${t}`, n = this.url.endpoint(e);
    try {
      const r = await u.get(n);
      return r.error ? s(r.error) : r.result ? d(r.result) : s("GetOrder: Unexpected error, result is undefined");
    } catch (r) {
      return s("GetOrder:", String(r));
    }
  }
  async getMatchedOrders(t, o, e) {
    const n = i(this.url, `/user/matched/${t}`, {
      ...e,
      pending: o
    });
    try {
      const r = await u.get(
        n
      );
      return r.error ? s(r.error) : r.result ? d(r.result) : s("GetMatchedOrders: Unexpected error, result is undefined");
    } catch (r) {
      return s("GetMatchedOrders:", String(r));
    }
  }
  async getUnMatchedOrders(t, o) {
    const e = i(
      this.url,
      `/user/unmatched/${t}`,
      o
    );
    try {
      const n = await u.get(
        e
      );
      return n.error ? s(n.error) : n.result ? d(n.result) : s("GetUnMatchedOrders: Unexpected error, result is undefined");
    } catch (n) {
      return s("GetUnMatchedOrders:", String(n));
    }
  }
  async getOrders(t, o) {
    const e = t ? "/matched" : "/unmatched", n = i(this.url, e, o);
    try {
      const r = await u.get(n);
      return r.error ? s(r.error) : r.result ? d(r.result) : s("GetAllOrders: Unexpected error, result is undefined");
    } catch (r) {
      return s("GetAllOrders:", String(r));
    }
  }
  async subscribeOrders(t, o, e, n, r = !1, l) {
    let a = !1;
    const h = async () => {
      if (!a) {
        a = !0;
        try {
          const c = o ? await this.getMatchedOrders(t, r, l) : await this.getUnMatchedOrders(t, l);
          c.ok ? await n(
            c.val
          ) : console.error("Error fetching orders:", c.error);
        } catch (c) {
          console.error("Error fetching orders:", c);
        } finally {
          a = !1;
        }
      }
    };
    await h();
    const O = setInterval(h, e);
    return () => {
      clearInterval(O);
    };
  }
  async getOrdersCount(t) {
    const o = this.url.endpoint(`/user/count/${t}`);
    try {
      const e = await u.get(o);
      return e.error ? s(e.error) : e.status === g.Ok && e.result !== void 0 ? d(e.result) : s("GetOrdersCount: Unexpected error, result is undefined");
    } catch (e) {
      return s("GetOrdersCount:", String(e));
    }
  }
}
export {
  w as OrdersProvider
};
