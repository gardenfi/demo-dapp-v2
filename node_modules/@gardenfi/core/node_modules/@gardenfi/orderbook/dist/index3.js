var r = /* @__PURE__ */ ((e) => (e.Bitcoin = "Bitcoin", e.EVM = "EVM", e))(r || {}), i = /* @__PURE__ */ ((e) => (e.mainnet = "mainnet", e.testnet = "testnet", e.localnet = "localnet", e))(i || {});
const t = {
  bitcoin: "bitcoin",
  bitcoin_testnet: "bitcoin_testnet",
  bitcoin_regtest: "bitcoin_regtest",
  ethereum: "ethereum",
  ethereum_arbitrum: "ethereum_arbitrum",
  ethereum_sepolia: "ethereum_sepolia",
  arbitrum_localnet: "arbitrum_localnet",
  arbitrum_sepolia: "arbitrum_sepolia",
  ethereum_localnet: "ethereum_localnet",
  base_sepolia: "base_sepolia"
}, s = (e) => !(e === t.ethereum_sepolia || e === t.bitcoin_testnet || e === t.bitcoin_regtest || e === t.arbitrum_localnet || e === t.ethereum_localnet || e === t.arbitrum_sepolia || e === t.base_sepolia), o = (e) => e === t.bitcoin || e === t.bitcoin_testnet || e === t.bitcoin_regtest, n = (e) => e === t.ethereum || e === t.ethereum_arbitrum || e === t.ethereum_sepolia || e === t.ethereum_localnet || e === t.arbitrum_localnet || e === t.arbitrum_sepolia || e === t.base_sepolia, u = (e) => {
  if (o(e)) return "Bitcoin";
  if (n(e)) return "EVM";
  throw new Error("Invalid or unsupported chain");
};
export {
  r as BlockchainType,
  t as Chains,
  i as NetworkType,
  u as getBlockchainType,
  o as isBitcoin,
  n as isEVM,
  s as isMainnet
};
