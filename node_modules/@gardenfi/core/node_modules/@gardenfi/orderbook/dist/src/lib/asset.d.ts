export type AssetCommon = {
    name: string;
    decimals: number;
    symbol: string;
    chain: Chain;
    logo?: string;
    atomicSwapAddress: string;
};
export type AssetToken = AssetCommon & {
    tokenAddress: string;
};
export type Asset = AssetToken;
export declare enum BlockchainType {
    Bitcoin = "Bitcoin",
    EVM = "EVM"
}
export declare enum NetworkType {
    mainnet = "mainnet",
    testnet = "testnet",
    localnet = "localnet"
}
export type Network = {
    [networkName: string]: {
        chainId: number;
        fillerAddresses: string[];
        networkLogo: string;
        explorer: string;
        networkType: NetworkType;
        assets?: Asset[];
    };
};
export declare const Chains: {
    readonly bitcoin: "bitcoin";
    readonly bitcoin_testnet: "bitcoin_testnet";
    readonly bitcoin_regtest: "bitcoin_regtest";
    readonly ethereum: "ethereum";
    readonly ethereum_arbitrum: "ethereum_arbitrum";
    readonly ethereum_sepolia: "ethereum_sepolia";
    readonly arbitrum_localnet: "arbitrum_localnet";
    readonly arbitrum_sepolia: "arbitrum_sepolia";
    readonly ethereum_localnet: "ethereum_localnet";
    readonly base_sepolia: "base_sepolia";
};
export type Chain = keyof typeof Chains;
export type EvmChain = keyof Omit<typeof Chains, 'bitcoin' | 'bitcoin_testnet' | 'bitcoin_regtest'>;
export declare const isMainnet: (chain: Chain) => chain is "bitcoin" | "ethereum" | "ethereum_arbitrum";
export declare const isBitcoin: (chain: Chain) => chain is "bitcoin" | "bitcoin_testnet" | "bitcoin_regtest";
export declare const isEVM: (chain: Chain) => chain is "ethereum" | "ethereum_arbitrum" | "ethereum_sepolia" | "arbitrum_localnet" | "arbitrum_sepolia" | "ethereum_localnet" | "base_sepolia";
export declare const getBlockchainType: (chain: Chain) => BlockchainType;
