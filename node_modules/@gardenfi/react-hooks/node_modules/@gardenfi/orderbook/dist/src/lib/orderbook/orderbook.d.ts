import { AsyncResult } from '@catalogfi/utils';
import { CreateOrder, CreateOrderRequestWithAdditionalData, IOrderbook, MatchedOrder, OrderbookConfig, PaginatedData, PaginationConfig } from './orderbook.types';
import { OrdersProvider } from '../orders/ordersProvider';

/**
 * A class that allows you to create and manage orders with the orderbook url.
 * @class
 * @extends {OrdersProvider}
 * @implements {IOrderbook}
 */
export declare class Orderbook extends OrdersProvider implements IOrderbook {
    private Url;
    private auth;
    private walletClient;
    /**
     * Creates an instance of Orderbook. Does not login to the orderbook.
     * @constructor
     * @param {OrderbookConfig} orderbookConfig - The configuration object for the orderbook.
     */
    constructor(orderbookConfig: OrderbookConfig);
    /**
     * Initializes the orderbook as well as logs in the orderbook (fetches the auth token).
     * @param {OrderbookConfig} orderbookConfig - The configuration object for the orderbook.
     */
    static init(orderbookConfig: OrderbookConfig): Promise<Orderbook>;
    /**
     * Creates an order
     * @param {CreateOrderConfig} createOrderConfig - The configuration for the creating the order.
     * @returns {string} The create order ID.
     */
    createOrder(order: CreateOrderRequestWithAdditionalData): AsyncResult<string, string>;
    fetchOrders<T extends boolean>(matched: T, pending?: boolean, paginationConfig?: PaginationConfig): AsyncResult<PaginatedData<T extends true ? MatchedOrder : CreateOrder>, string>;
    /**
     * Wrapper for the subscribeOrders method in the OrdersProvider class to abstract the address parameter.
     * @param matched - Whether to get matched or unmatched orders
     * @param interval - The interval to poll for updates
     * @param cb - The callback to be called when the orders are updated
     * @param paginationConfig - The configuration for the pagination
     * @returns {() => void} A function to unsubscribe from the order updates
     */
    subscribeToOrders<T extends boolean>(matched: T, interval: number, cb: (orders: PaginatedData<T extends true ? MatchedOrder : CreateOrder>) => Promise<void>, paginationConfig?: PaginationConfig, pending?: boolean): Promise<() => void>;
    getUserOrdersCount(): AsyncResult<number, string>;
}
