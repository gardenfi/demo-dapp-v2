import { BaseError as r } from "./index35.js";
class u extends r {
  constructor({ blockHash: t, blockNumber: e, blockTag: i, hash: s, index: o }) {
    let n = "Transaction";
    i && o !== void 0 && (n = `Transaction at block time "${i}" at index "${o}"`), t && o !== void 0 && (n = `Transaction at block hash "${t}" at index "${o}"`), e && o !== void 0 && (n = `Transaction at block number "${e}" at index "${o}"`), s && (n = `Transaction with hash "${s}"`), super(`${n} could not be found.`, {
      name: "TransactionNotFoundError"
    });
  }
}
class d extends r {
  constructor({ hash: t }) {
    super(`Transaction receipt with hash "${t}" could not be found. The Transaction may not be processed on a block yet.`, {
      name: "TransactionReceiptNotFoundError"
    });
  }
}
class T extends r {
  constructor({ hash: t }) {
    super(`Timed out while waiting for transaction with hash "${t}" to be confirmed.`, { name: "WaitForTransactionReceiptTimeoutError" });
  }
}
export {
  u as TransactionNotFoundError,
  d as TransactionReceiptNotFoundError,
  T as WaitForTransactionReceiptTimeoutError
};
