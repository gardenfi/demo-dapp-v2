const i = /* @__PURE__ */ new Map(), c = /* @__PURE__ */ new Map();
function p(o) {
  const a = (s, t) => ({
    clear: () => t.delete(s),
    get: () => t.get(s),
    set: (r) => t.set(s, r)
  }), n = a(o, i), e = a(o, c);
  return {
    clear: () => {
      n.clear(), e.clear();
    },
    promise: n,
    response: e
  };
}
async function l(o, { cacheKey: a, cacheTime: n = Number.POSITIVE_INFINITY }) {
  const e = p(a), s = e.response.get();
  if (s && n > 0 && (/* @__PURE__ */ new Date()).getTime() - s.created.getTime() < n)
    return s.data;
  let t = e.promise.get();
  t || (t = o(), e.promise.set(t));
  try {
    const r = await t;
    return e.response.set({ created: /* @__PURE__ */ new Date(), data: r }), r;
  } finally {
    e.promise.clear();
  }
}
export {
  p as getCache,
  i as promiseCache,
  c as responseCache,
  l as withCache
};
