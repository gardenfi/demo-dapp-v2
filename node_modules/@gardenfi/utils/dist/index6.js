import { Ok as r, Err as a, Fetcher as d } from "@catalogfi/utils";
import { MemoryStorage as m } from "./index7.js";
import { StoreKeys as f } from "./index8.js";
import { jwtDecode as u } from "jwt-decode";
import { Url as w } from "./index5.js";
import { createSiweMessage as g } from "./index13.js";
class I {
  constructor(n, i, t) {
    this.API = "https://api.garden.finance", this.url = new w("/", n ?? this.API), this.walletClient = i, this.domain = (t == null ? void 0 : t.domain) || "app.garden.finance", this.domain.startsWith("https://") && (this.domain = this.domain.split("https://")[1]), this.signingStatement = (t == null ? void 0 : t.signingStatement) ?? "Garden.fi", this.store = (t == null ? void 0 : t.store) ?? new m();
  }
  verifyToken(n, i) {
    try {
      const t = y(n);
      if (!t) return r(!1);
      const e = Math.floor(Date.now() / 1e3) + 120;
      return r(
        t.exp > e && t.address.toLowerCase() === i.toLowerCase()
      );
    } catch {
      return r(!1);
    }
  }
  async getToken() {
    var s;
    if (!((s = this.walletClient.account) != null && s.address))
      return a("Wallet client does not have an account");
    const n = this.store.getItem(f.AUTH_TOKEN);
    if (n) {
      const o = this.verifyToken(
        n,
        this.walletClient.account.address
      );
      if (o.ok && o.val) return r(n);
    }
    const i = await this.signStatement();
    if (i.error)
      return a(i.error);
    const t = await d.post(
      this.url.endpoint("verify"),
      {
        body: JSON.stringify({
          ...i.val
        }),
        headers: {
          "Content-Type": "application/json"
        }
      }
    );
    if (t.error) return a(t.error);
    const e = t.result;
    if (!e) return a("Failed to get token");
    if (!this.verifyToken(e, this.walletClient.account.address).val)
      throw new Error("Token verification failed");
    return this.store.setItem(f.AUTH_TOKEN, e), r(e);
  }
  async signStatement() {
    var h;
    if (!((h = this.walletClient.account) != null && h.address))
      return a("Wallet client does not have a valid account");
    const n = /* @__PURE__ */ new Date(), i = new Date(n.getTime() + 300 * 1e3), e = (await d.get(
      this.url.endpoint("nonce")
    )).result;
    if (!e)
      return a("Failed to get nonce");
    const l = await this.walletClient.getChainId(), s = g({
      domain: this.domain,
      address: this.walletClient.account.address,
      statement: this.signingStatement,
      nonce: e,
      uri: "https://" + this.domain,
      version: "1",
      chainId: l,
      notBefore: i
    }), o = await this.walletClient.signMessage({
      account: this.walletClient.account,
      message: s
    });
    return r({
      message: s,
      signature: o,
      nonce: e
    });
  }
}
const y = (c) => {
  try {
    return u(c);
  } catch {
    return;
  }
};
export {
  I as Siwe,
  y as parseJwt
};
