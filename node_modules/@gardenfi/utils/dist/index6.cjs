"use strict";Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const t=require("@catalogfi/utils"),u=require("./index7.cjs"),h=require("./index8.cjs"),w=require("jwt-decode"),f=require("./index5.cjs"),g=require("./index13.cjs");class m{constructor(n,i,e){this.API="https://api.garden.finance",this.url=new f.Url("/",n??this.API),this.walletClient=i,this.domain=(e==null?void 0:e.domain)||"app.garden.finance",this.domain.startsWith("https://")&&(this.domain=this.domain.split("https://")[1]),this.signingStatement=(e==null?void 0:e.signingStatement)??"Garden.fi",this.store=(e==null?void 0:e.store)??new u.MemoryStorage}verifyToken(n,i){try{const e=d(n);if(!e)return t.Ok(!1);const r=Math.floor(Date.now()/1e3)+120;return t.Ok(e.exp>r&&e.address.toLowerCase()===i.toLowerCase())}catch{return t.Ok(!1)}}async getToken(){var s;if(!((s=this.walletClient.account)!=null&&s.address))return t.Err("Wallet client does not have an account");const n=this.store.getItem(h.StoreKeys.AUTH_TOKEN);if(n){const a=this.verifyToken(n,this.walletClient.account.address);if(a.ok&&a.val)return t.Ok(n)}const i=await this.signStatement();if(i.error)return t.Err(i.error);const e=await t.Fetcher.post(this.url.endpoint("verify"),{body:JSON.stringify({...i.val}),headers:{"Content-Type":"application/json"}});if(e.error)return t.Err(e.error);const r=e.result;if(!r)return t.Err("Failed to get token");if(!this.verifyToken(r,this.walletClient.account.address).val)throw new Error("Token verification failed");return this.store.setItem(h.StoreKeys.AUTH_TOKEN,r),t.Ok(r)}async signStatement(){var l;if(!((l=this.walletClient.account)!=null&&l.address))return t.Err("Wallet client does not have a valid account");const n=new Date,i=new Date(n.getTime()+300*1e3),r=(await t.Fetcher.get(this.url.endpoint("nonce"))).result;if(!r)return t.Err("Failed to get nonce");const c=await this.walletClient.getChainId(),s=g.createSiweMessage({domain:this.domain,address:this.walletClient.account.address,statement:this.signingStatement,nonce:r,uri:"https://"+this.domain,version:"1",chainId:c,notBefore:i}),a=await this.walletClient.signMessage({account:this.walletClient.account,message:s});return t.Ok({message:s,signature:a,nonce:r})}}const d=o=>{try{return w.jwtDecode(o)}catch{return}};exports.Siwe=m;exports.parseJwt=d;
