import { SiweInvalidMessageFieldError as e } from "./index47.js";
import { getAddress as S } from "./index40.js";
import { isUri as $ } from "./index48.js";
function C(n) {
  const { chainId: i, domain: s, expirationTime: u, issuedAt: g = /* @__PURE__ */ new Date(), nonce: a, notBefore: m, requestId: h, resources: w, scheme: o, uri: c, version: f } = n;
  {
    if (i !== Math.floor(i))
      throw new e({
        field: "chainId",
        metaMessages: [
          "- Chain ID must be a EIP-155 chain ID.",
          "- See https://eips.ethereum.org/EIPS/eip-155",
          "",
          `Provided value: ${i}`
        ]
      });
    if (!(p.test(s) || M.test(s) || x.test(s)))
      throw new e({
        field: "domain",
        metaMessages: [
          "- Domain must be an RFC 3986 authority.",
          "- See https://www.rfc-editor.org/rfc/rfc3986",
          "",
          `Provided value: ${s}`
        ]
      });
    if (!A.test(a))
      throw new e({
        field: "nonce",
        metaMessages: [
          "- Nonce must be at least 8 characters.",
          "- Nonce must be alphanumeric.",
          "",
          `Provided value: ${a}`
        ]
      });
    if (!$(c))
      throw new e({
        field: "uri",
        metaMessages: [
          "- URI must be a RFC 3986 URI referring to the resource that is the subject of the signing.",
          "- See https://www.rfc-editor.org/rfc/rfc3986",
          "",
          `Provided value: ${c}`
        ]
      });
    if (f !== "1")
      throw new e({
        field: "version",
        metaMessages: [
          "- Version must be '1'.",
          "",
          `Provided value: ${f}`
        ]
      });
    if (o && !P.test(o))
      throw new e({
        field: "scheme",
        metaMessages: [
          "- Scheme must be an RFC 3986 URI scheme.",
          "- See https://www.rfc-editor.org/rfc/rfc3986#section-3.1",
          "",
          `Provided value: ${o}`
        ]
      });
    const t = n.statement;
    if (t != null && t.includes(`
`))
      throw new e({
        field: "statement",
        metaMessages: [
          "- Statement must not include '\\n'.",
          "",
          `Provided value: ${t}`
        ]
      });
  }
  const l = S(n.address), v = o ? `${o}://${s}` : s, I = n.statement ? `${n.statement}
` : "", R = `${v} wants you to sign in with your Ethereum account:
${l}

${I}`;
  let r = `URI: ${c}
Version: ${f}
Chain ID: ${i}
Nonce: ${a}
Issued At: ${g.toISOString()}`;
  if (u && (r += `
Expiration Time: ${u.toISOString()}`), m && (r += `
Not Before: ${m.toISOString()}`), h && (r += `
Request ID: ${h}`), w) {
    let t = `
Resources:`;
    for (const d of w) {
      if (!$(d))
        throw new e({
          field: "resources",
          metaMessages: [
            "- Every resource must be a RFC 3986 URI.",
            "- See https://www.rfc-editor.org/rfc/rfc3986",
            "",
            `Provided value: ${d}`
          ]
        });
      t += `
- ${d}`;
    }
    r += t;
  }
  return `${R}
${r}`;
}
const p = /^([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,}(:[0-9]{1,5})?$/, M = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(:[0-9]{1,5})?$/, x = /^localhost(:[0-9]{1,5})?$/, A = /^[a-zA-Z0-9]{8,}$/, P = /^([a-zA-Z][a-zA-Z0-9+-.]*)$/;
export {
  C as createSiweMessage
};
