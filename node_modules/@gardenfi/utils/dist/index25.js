import { hexToBigInt as h } from "./index26.js";
import { getAction as v } from "./index27.js";
import { observe as i } from "./index28.js";
import { poll as d } from "./index29.js";
import { stringify as y } from "./index30.js";
import { getBlockNumber as g } from "./index18.js";
function j(t, { emitOnBegin: b = !1, emitMissed: f = !1, onBlockNumber: p, onError: n, poll: k, pollingInterval: m = t.pollingInterval }) {
  const B = typeof k < "u" ? k : !(t.transport.type === "webSocket" || t.transport.type === "fallback" && t.transport.transports[0].config.type === "webSocket");
  let r;
  return B ? (() => {
    const l = y([
      "watchBlockNumber",
      t.uid,
      b,
      f,
      m
    ]);
    return i(l, { onBlockNumber: p, onError: n }, (e) => d(async () => {
      var a;
      try {
        const o = await v(t, g, "getBlockNumber")({ cacheTime: 0 });
        if (r) {
          if (o === r)
            return;
          if (o - r > 1 && f)
            for (let s = r + 1n; s < o; s++)
              e.onBlockNumber(s, r), r = s;
        }
        (!r || o > r) && (e.onBlockNumber(o, r), r = o);
      } catch (o) {
        (a = e.onError) == null || a.call(e, o);
      }
    }, {
      emitOnBegin: b,
      interval: m
    }));
  })() : (() => {
    const l = y([
      "watchBlockNumber",
      t.uid,
      b,
      f
    ]);
    return i(l, { onBlockNumber: p, onError: n }, (e) => {
      let a = !0, o = () => a = !1;
      return (async () => {
        try {
          const s = (() => {
            if (t.transport.type === "fallback") {
              const c = t.transport.transports.find((u) => u.config.type === "webSocket");
              return c ? c.value : t.transport;
            }
            return t.transport;
          })(), { unsubscribe: w } = await s.subscribe({
            params: ["newHeads"],
            onData(c) {
              var N;
              if (!a)
                return;
              const u = h((N = c.result) == null ? void 0 : N.number);
              e.onBlockNumber(u, r), r = u;
            },
            onError(c) {
              var u;
              (u = e.onError) == null || u.call(e, c);
            }
          });
          o = w, a || o();
        } catch (s) {
          n == null || n(s);
        }
      })(), () => o();
    });
  })();
}
export {
  j as watchBlockNumber
};
