import { Err as a, Ok as i } from "@catalogfi/utils";
import { getContract as u, erc20Abi as d, maxUint256 as m } from "viem";
import { with0x as o } from "./index3.js";
import { waitForTransactionReceipt as f } from "./index10.js";
const x = async (p, s, t, r) => {
  if (!r.account) return a("No account found");
  const n = u({
    address: o(s),
    abi: d,
    client: r
  });
  try {
    const c = await n.read.allowance([
      o(r.account.address),
      o(t)
    ]);
    if (BigInt(c) < BigInt(p)) {
      const e = await n.write.approve(
        [o(t), m],
        {
          account: r.account,
          chain: r.chain
        }
      );
      return (await f(r, {
        hash: e
      })).status !== "success" ? a("Failed to approve") : i(e);
    }
    return i("Already approved");
  } catch (c) {
    return a("Failed to approve: " + c);
  }
};
export {
  x as checkAllowanceAndApprove
};
