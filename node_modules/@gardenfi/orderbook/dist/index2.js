import { Err as s, Fetcher as o, Ok as l } from "@catalogfi/utils";
import { MAINNET_ORDERBOOK_API as d } from "./index6.js";
import { Url as h, Authorization as O } from "@gardenfi/utils";
import { OrdersProvider as p } from "./index4.js";
class c extends p {
  /**
   * Creates an instance of Orderbook. Does not login to the orderbook.
   * @constructor
   * @param {OrderbookConfig} orderbookConfig - The configuration object for the orderbook.
   */
  constructor(r) {
    const e = new h(
      "/relayer",
      r.url ?? d
    );
    super(e), this.Url = e, this.walletClient = r.walletClient, this.auth = r.auth;
  }
  /**
   * Initializes the orderbook as well as logs in the orderbook (fetches the auth token).
   * @param {OrderbookConfig} orderbookConfig - The configuration object for the orderbook.
   */
  static async init(r) {
    return await r.auth.getToken(), new c(r);
  }
  /**
   * Creates an order
   * @param {CreateOrderConfig} createOrderConfig - The configuration for the creating the order.
   * @returns {string} The create order ID.
   */
  async createOrder(r) {
    const e = await this.auth.getToken();
    if (e.error) return s(e.error);
    try {
      const t = await o.post(
        this.Url.endpoint("create-order"),
        {
          body: JSON.stringify(r),
          headers: {
            Authorization: O(e.val),
            "Content-Type": "application/json"
          }
        }
      );
      return t.error ? s(t.error) : t.result ? l(t.result) : s("CreateOrder: Unexpected error, result is undefined");
    } catch (t) {
      return s("CreateOrder:", String(t));
    }
  }
  async fetchOrders(r, e = !1, t) {
    var n;
    const a = (n = this.walletClient.account) == null ? void 0 : n.address;
    return a ? r ? await super.getMatchedOrders(
      a,
      e,
      t
    ) : await super.getUnMatchedOrders(
      a,
      t
    ) : s("Wallet client does not have an account");
  }
  /**
   * Wrapper for the subscribeOrders method in the OrdersProvider class to abstract the address parameter.
   * @param matched - Whether to get matched or unmatched orders
   * @param interval - The interval to poll for updates
   * @param cb - The callback to be called when the orders are updated
   * @param paginationConfig - The configuration for the pagination
   * @returns {() => void} A function to unsubscribe from the order updates
   */
  async subscribeToOrders(r, e, t, a, n) {
    var u;
    const i = (u = this.walletClient.account) == null ? void 0 : u.address;
    return i ? await super.subscribeOrders(
      i,
      r,
      e,
      t,
      n,
      a
    ) : () => {
    };
  }
  async getUserOrdersCount() {
    var e;
    const r = (e = this.walletClient.account) == null ? void 0 : e.address;
    return r ? super.getOrdersCount(r) : s("Wallet client does not have an account");
  }
}
export {
  c as Orderbook
};
