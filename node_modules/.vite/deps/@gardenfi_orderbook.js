import __buffer_polyfill from 'vite-plugin-node-polyfills/shims/buffer'
globalThis.Buffer = globalThis.Buffer || __buffer_polyfill
import __global_polyfill from 'vite-plugin-node-polyfills/shims/global'
globalThis.global = globalThis.global || __global_polyfill
import __process_polyfill from 'vite-plugin-node-polyfills/shims/process'
globalThis.process = globalThis.process || __process_polyfill

import {
  o,
  r,
  r2
} from "./chunk-7UECOOSC.js";
import "./chunk-SB3BTP7W.js";
import "./chunk-GERKKGSP.js";
import {
  W,
  b,
  k
} from "./chunk-64BDWLZ5.js";
import "./chunk-MNXH7TI4.js";
import "./chunk-IMNFBB4U.js";
import "./chunk-JZX67L7D.js";
import "./chunk-YUGJFHN2.js";
import "./chunk-SKEEBPSX.js";
import {
  __toESM,
  require_dist,
  require_dist2,
  require_dist3
} from "./chunk-HKR3LW4X.js";

// node_modules/@gardenfi/orderbook/dist/index.js
var import_dist19 = __toESM(require_dist());
var import_dist20 = __toESM(require_dist2());
var import_dist21 = __toESM(require_dist3());

// node_modules/@gardenfi/orderbook/dist/index2.js
var import_dist10 = __toESM(require_dist(), 1);
var import_dist11 = __toESM(require_dist2(), 1);
var import_dist12 = __toESM(require_dist3(), 1);

// node_modules/@gardenfi/orderbook/dist/index6.js
var import_dist = __toESM(require_dist(), 1);
var import_dist2 = __toESM(require_dist2(), 1);
var import_dist3 = __toESM(require_dist3(), 1);
var n = "https://api.garden.finance";

// node_modules/@gardenfi/orderbook/dist/index4.js
var import_dist7 = __toESM(require_dist(), 1);
var import_dist8 = __toESM(require_dist2(), 1);
var import_dist9 = __toESM(require_dist3(), 1);

// node_modules/@gardenfi/orderbook/dist/index7.js
var import_dist4 = __toESM(require_dist(), 1);
var import_dist5 = __toESM(require_dist2(), 1);
var import_dist6 = __toESM(require_dist3(), 1);
var i = (o3, e, t3) => {
  const r4 = o3.endpoint(e);
  return t3 && Object.entries(t3).forEach(([c2, n4]) => {
    n4 !== void 0 && r4.searchParams.append(c2, n4.toString());
  }), r4;
};

// node_modules/@gardenfi/orderbook/dist/index4.js
var w = class {
  constructor(t3) {
    this.url = new r2("/orders", t3);
  }
  async getOrder(t3, o3) {
    const e = o3 ? `/id/matched/${t3}` : `/id/unmatched/${t3}`, n4 = this.url.endpoint(e);
    try {
      const r4 = await k.get(n4);
      return r4.error ? b(r4.error) : r4.result ? W(r4.result) : b("GetOrder: Unexpected error, result is undefined");
    } catch (r4) {
      return b("GetOrder:", String(r4));
    }
  }
  async getMatchedOrders(t3, o3, e) {
    const n4 = i(this.url, `/user/matched/${t3}`, {
      ...e,
      pending: o3
    });
    try {
      const r4 = await k.get(
        n4
      );
      return r4.error ? b(r4.error) : r4.result ? W(r4.result) : b("GetMatchedOrders: Unexpected error, result is undefined");
    } catch (r4) {
      return b("GetMatchedOrders:", String(r4));
    }
  }
  async getUnMatchedOrders(t3, o3) {
    const e = i(
      this.url,
      `/user/unmatched/${t3}`,
      o3
    );
    try {
      const n4 = await k.get(
        e
      );
      return n4.error ? b(n4.error) : n4.result ? W(n4.result) : b("GetUnMatchedOrders: Unexpected error, result is undefined");
    } catch (n4) {
      return b("GetUnMatchedOrders:", String(n4));
    }
  }
  async getOrders(t3, o3) {
    const e = t3 ? "/matched" : "/unmatched", n4 = i(this.url, e, o3);
    try {
      const r4 = await k.get(n4);
      return r4.error ? b(r4.error) : r4.result ? W(r4.result) : b("GetAllOrders: Unexpected error, result is undefined");
    } catch (r4) {
      return b("GetAllOrders:", String(r4));
    }
  }
  async subscribeOrders(t3, o3, e, n4, r4 = false, l) {
    let a2 = false;
    const h = async () => {
      if (!a2) {
        a2 = true;
        try {
          const c2 = o3 ? await this.getMatchedOrders(t3, r4, l) : await this.getUnMatchedOrders(t3, l);
          c2.ok ? await n4(
            c2.val
          ) : console.error("Error fetching orders:", c2.error);
        } catch (c2) {
          console.error("Error fetching orders:", c2);
        } finally {
          a2 = false;
        }
      }
    };
    await h();
    const O = setInterval(h, e);
    return () => {
      clearInterval(O);
    };
  }
  async getOrdersCount(t3) {
    const o3 = this.url.endpoint(`/user/count/${t3}`);
    try {
      const e = await k.get(o3);
      return e.error ? b(e.error) : e.status === o.Ok && e.result !== void 0 ? W(e.result) : b("GetOrdersCount: Unexpected error, result is undefined");
    } catch (e) {
      return b("GetOrdersCount:", String(e));
    }
  }
};

// node_modules/@gardenfi/orderbook/dist/index2.js
var c = class _c extends w {
  /**
   * Creates an instance of Orderbook. Does not login to the orderbook.
   * @constructor
   * @param {OrderbookConfig} orderbookConfig - The configuration object for the orderbook.
   */
  constructor(r4) {
    const e = new r2(
      "/relayer",
      r4.url ?? n
    );
    super(e), this.Url = e, this.walletClient = r4.walletClient, this.auth = r4.auth;
  }
  /**
   * Initializes the orderbook as well as logs in the orderbook (fetches the auth token).
   * @param {OrderbookConfig} orderbookConfig - The configuration object for the orderbook.
   */
  static async init(r4) {
    return await r4.auth.getToken(), new _c(r4);
  }
  /**
   * Creates an order
   * @param {CreateOrderConfig} createOrderConfig - The configuration for the creating the order.
   * @returns {string} The create order ID.
   */
  async createOrder(r4) {
    const e = await this.auth.getToken();
    if (e.error) return b(e.error);
    try {
      const t3 = await k.post(
        this.Url.endpoint("create-order"),
        {
          body: JSON.stringify(r4),
          headers: {
            Authorization: r(e.val),
            "Content-Type": "application/json"
          }
        }
      );
      return t3.error ? b(t3.error) : t3.result ? W(t3.result) : b("CreateOrder: Unexpected error, result is undefined");
    } catch (t3) {
      return b("CreateOrder:", String(t3));
    }
  }
  async fetchOrders(r4, e = false, t3) {
    var n4;
    const a2 = (n4 = this.walletClient.account) == null ? void 0 : n4.address;
    return a2 ? r4 ? await super.getMatchedOrders(
      a2,
      e,
      t3
    ) : await super.getUnMatchedOrders(
      a2,
      t3
    ) : b("Wallet client does not have an account");
  }
  /**
   * Wrapper for the subscribeOrders method in the OrdersProvider class to abstract the address parameter.
   * @param matched - Whether to get matched or unmatched orders
   * @param interval - The interval to poll for updates
   * @param cb - The callback to be called when the orders are updated
   * @param paginationConfig - The configuration for the pagination
   * @returns {() => void} A function to unsubscribe from the order updates
   */
  async subscribeToOrders(r4, e, t3, a2, n4) {
    var u2;
    const i4 = (u2 = this.walletClient.account) == null ? void 0 : u2.address;
    return i4 ? await super.subscribeOrders(
      i4,
      r4,
      e,
      t3,
      n4,
      a2
    ) : () => {
    };
  }
  async getUserOrdersCount() {
    var e;
    const r4 = (e = this.walletClient.account) == null ? void 0 : e.address;
    return r4 ? super.getOrdersCount(r4) : b("Wallet client does not have an account");
  }
};

// node_modules/@gardenfi/orderbook/dist/index3.js
var import_dist13 = __toESM(require_dist(), 1);
var import_dist14 = __toESM(require_dist2(), 1);
var import_dist15 = __toESM(require_dist3(), 1);
var r3 = ((e) => (e.Bitcoin = "Bitcoin", e.EVM = "EVM", e))(r3 || {});
var i2 = ((e) => (e.mainnet = "mainnet", e.testnet = "testnet", e.localnet = "localnet", e))(i2 || {});
var t = {
  bitcoin: "bitcoin",
  bitcoin_testnet: "bitcoin_testnet",
  bitcoin_regtest: "bitcoin_regtest",
  ethereum: "ethereum",
  ethereum_arbitrum: "ethereum_arbitrum",
  ethereum_sepolia: "ethereum_sepolia",
  arbitrum_localnet: "arbitrum_localnet",
  arbitrum_sepolia: "arbitrum_sepolia",
  ethereum_localnet: "ethereum_localnet",
  base_sepolia: "base_sepolia"
};
var s = (e) => !(e === t.ethereum_sepolia || e === t.bitcoin_testnet || e === t.bitcoin_regtest || e === t.arbitrum_localnet || e === t.ethereum_localnet || e === t.arbitrum_sepolia || e === t.base_sepolia);
var o2 = (e) => e === t.bitcoin || e === t.bitcoin_testnet || e === t.bitcoin_regtest;
var n2 = (e) => e === t.ethereum || e === t.ethereum_arbitrum || e === t.ethereum_sepolia || e === t.ethereum_localnet || e === t.arbitrum_localnet || e === t.arbitrum_sepolia || e === t.base_sepolia;
var u = (e) => {
  if (o2(e)) return "Bitcoin";
  if (n2(e)) return "EVM";
  throw new Error("Invalid or unsupported chain");
};

// node_modules/@gardenfi/orderbook/dist/index5.js
var import_dist16 = __toESM(require_dist(), 1);
var import_dist17 = __toESM(require_dist2(), 1);
var import_dist18 = __toESM(require_dist3(), 1);
var s2 = {
  id: 31338,
  name: "Arbitrum Localnet",
  nativeCurrency: {
    name: "Ethereum",
    symbol: "ETH",
    decimals: 18
  },
  rpcUrls: {
    default: {
      http: ["http://localhost:8546/"]
    }
  },
  testnet: true
};
var i3 = {
  id: 31337,
  name: "Ethereum Localnet",
  nativeCurrency: {
    name: "Ethereum",
    symbol: "ETH",
    decimals: 18
  },
  rpcUrls: {
    default: {
      http: ["http://localhost:8545/"]
    }
  },
  testnet: true
};
var n3 = {
  name: "Bitcoin Regtest",
  decimals: 8,
  symbol: "BTC",
  chain: t.bitcoin_regtest,
  atomicSwapAddress: "primary",
  tokenAddress: "primary"
};
var a = {
  name: "WBTC Arbitrum Localnet",
  decimals: 8,
  symbol: "WBTC",
  chain: t.arbitrum_localnet,
  atomicSwapAddress: "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
  tokenAddress: "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512"
};
var t2 = {
  name: "WBTC Ethereum Localnet",
  decimals: 8,
  symbol: "WBTC",
  chain: t.ethereum_localnet,
  atomicSwapAddress: "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  tokenAddress: "0x5FbDB2315678afecb367f032d93F642f64180aa3"
};
var d = {
  localnet: {
    [`${t.arbitrum_localnet}_0xdc64a140aa3e981100a9beca4e685f962f0cf6c9`]: a,
    [`${t.ethereum_localnet}_0xe7f1725e7734ce288f8367e1bb143e90bb3f0512`]: t2
  },
  testnet: {
    [`${t.bitcoin_testnet}_primary`]: {
      name: "BTC",
      decimals: 8,
      symbol: "BTC",
      chain: t.bitcoin_testnet,
      tokenAddress: "primary",
      atomicSwapAddress: "primary"
    },
    [`${t.ethereum_sepolia}_0x3c6a17b8cd92976d1d91e491c93c98cd81998265`]: {
      name: "Wrapped Bitcoin",
      decimals: 8,
      symbol: "WBTC",
      chain: t.ethereum_sepolia,
      logo: "https://garden-finance.imgix.net/token-images/wbtc.svg",
      tokenAddress: "0x4D68da063577F98C55166c7AF6955cF58a97b20A",
      atomicSwapAddress: "0x3C6a17b8cD92976D1D91E491c93c98cd81998265"
    },
    [`${t.arbitrum_sepolia}_0x1cd0bbd55fd66b4c5f7dfe434efd009c09e628d1`]: {
      name: "Wrapped Bitcoin",
      decimals: 8,
      symbol: "WBTC",
      logo: "https://garden-finance.imgix.net/token-images/wbtc.svg",
      chain: t.arbitrum_sepolia,
      tokenAddress: "0x00ab86f54F436CfE15253845F139955ae0C00bAf",
      atomicSwapAddress: "0x1cd0bBd55fD66B4C5F7dfE434eFD009C09e628d1"
    },
    [`${t.arbitrum_sepolia}_0xd5fedb4cecb0f1d32788a190d9eb47d94d23ee4e`]: {
      name: "Seed",
      decimals: 18,
      symbol: "SEED",
      chain: t.arbitrum_sepolia,
      logo: "https://garden-finance.imgix.net/token-images/seed.svg",
      tokenAddress: "0x13DCec0762EcC5E666c207ab44Dc768e5e33070F",
      atomicSwapAddress: "0xD5FeDb4ceCB0F1D32788a190d9EB47D94D23eE4e"
    },
    [`${t.base_sepolia}_0x00ab86f54f436cfe15253845f139955ae0c00baf`]: {
      name: "Wrapped Bitcoin",
      decimals: 8,
      symbol: "WBTC",
      chain: t.base_sepolia,
      logo: "https://garden-finance.imgix.net/token-images/wbtc.svg",
      tokenAddress: "0x13DCec0762EcC5E666c207ab44Dc768e5e33070F",
      atomicSwapAddress: "0x00ab86f54F436CfE15253845F139955ae0C00bAf"
    }
  },
  mainnet: {}
};
export {
  s2 as ArbitrumLocalnet,
  r3 as BlockchainType,
  t as Chains,
  i3 as EthereumLocalnet,
  i2 as NetworkType,
  c as Orderbook,
  w as OrdersProvider,
  d as SupportedAssets,
  a as WBTCArbitrumLocalnetAsset,
  t2 as WBTCEthereumLocalnetAsset,
  n3 as bitcoinRegtestAsset,
  u as getBlockchainType,
  o2 as isBitcoin,
  n2 as isEVM,
  s as isMainnet
};
//# sourceMappingURL=@gardenfi_orderbook.js.map
