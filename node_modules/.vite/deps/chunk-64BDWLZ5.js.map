{
  "version": 3,
  "sources": ["../../@catalogfi/utils/dist/index.js"],
  "sourcesContent": ["var y = (t, e, r) => {\n  if (!e.has(t))\n    throw TypeError(\"Cannot \" + r);\n};\nvar u = (t, e, r) => (y(t, e, \"read from private field\"), r ? r.call(t) : e.get(t)), h = (t, e, r) => {\n  if (e.has(t))\n    throw TypeError(\"Cannot add the same private member more than once\");\n  e instanceof WeakSet ? e.add(t) : e.set(t, r);\n}, l = (t, e, r, s) => (y(t, e, \"write to private field\"), s ? s.call(t, r) : e.set(t, r), r);\nconst d = (t) => new Promise((e) => setTimeout(e, t));\nclass x {\n  /**\n   * @param {number} maxRetries - The maximum number of retries, if less < 0 then it is set to 0\n   * @param {number} delay - The delay between retries\n   */\n  constructor(e, r) {\n    this.maxRetries = Math.max(e, 0), this.delay = r;\n  }\n  /**\n   * Retries a function until it succeeds or the max number of retries is reached\n   *\n   * @param {() => Promise<T>} fn - The function to retry\n   * @return {Promise<T>} a Promise that resolves to the result of the function\n   */\n  async retry(e) {\n    let r = 0, s;\n    for (; r < this.maxRetries + 1; )\n      try {\n        return await e();\n      } catch (n) {\n        r++, s = n, await d(this.delay * r);\n      }\n    throw s;\n  }\n}\nconst p = (t) => {\n  try {\n    return JSON.parse(t);\n  } catch {\n    return t;\n  }\n};\nclass k {\n  static async _postWithFallback(e, r) {\n    let s = \"\";\n    for (const n of e)\n      try {\n        const a = await fetch(n, {\n          method: \"POST\",\n          ...r\n        });\n        if (a.status >= 500) {\n          s = await (a.text() || a.json());\n          continue;\n        }\n        return await this.parse(a);\n      } catch (a) {\n        s = g(a);\n        continue;\n      }\n    throw new Error(s || \"All APIs failed\");\n  }\n  /**\n   * Asynchronously sends a POST request to multiple URLs with fallback logic.\n   *\n   * @param {string[]} input - array of URLs to send the POST request to\n   * @param {RequestInit} [init] - optional request initialization options\n   * @return {Promise<T>} a Promise that resolves to the parsed response data\n   */\n  static async postWithFallback(e, r) {\n    return await f(r).retry(\n      () => this._postWithFallback(e, r)\n    );\n  }\n  static async _getWithFallback(e, r) {\n    let s = \"\";\n    for (const n of e)\n      try {\n        const a = await fetch(n, r);\n        if (a.status >= 500) {\n          s = await (a.text() || a.json());\n          continue;\n        }\n        return await this.parse(a);\n      } catch (a) {\n        s = g(a);\n        continue;\n      }\n    throw new Error(s || \"All APIs failed\");\n  }\n  /**\n   * Asynchronously sends a POST request to multiple URLs with fallback mechanism.\n   *\n   * @param {string[]} input - An array of URLs to retrieve data from.\n   * @param {RequestInit} [init] - Optional request options.\n   * @return {Promise<T>} A promise that resolves to the retrieved data.\n   */\n  static async getWithFallback(e, r) {\n    return await f(r).retry(\n      () => this._getWithFallback(e, r)\n    );\n  }\n  static async _get(e, r) {\n    return await this.parse(await fetch(e, r));\n  }\n  /**\n   * Asynchronously retrieves data of type T from the specified URL or RequestInfo, with optional initialization options.\n   *\n   * @param {RequestInfo | URL} input - The URL or RequestInfo to fetch data from\n   * @param {RequestInit} init - Optional initialization options for the fetch request\n   * @return {Promise<T>} The retrieved data of type T\n   */\n  static async get(e, r) {\n    return await f(r).retry(() => this._get(e, r));\n  }\n  static async _post(e, r) {\n    return await this.parse(\n      await fetch(e, {\n        method: \"POST\",\n        ...r\n      })\n    );\n  }\n  /**\n   * Asynchronously sends a POST request to the specified URL or RequestInfo, with optional initialization options.\n   */\n  static async post(e, r) {\n    return await f(r).retry(() => this._post(e, r));\n  }\n  /**\n   * Parses the response and returns the result as the specified type.\n   *\n   * @param {Response} res - the response object to be parsed\n   * @return {Promise<T>} the parsed result of type T\n   */\n  static async parse(e) {\n    const r = await e.text();\n    if (e.status >= 200 && e.status < 300)\n      return p(r);\n    throw new Error(r);\n  }\n}\nfunction g(t) {\n  return (t == null ? void 0 : t.message) || (t == null ? void 0 : t.toString()) || \"unknown error\";\n}\nconst f = (t) => new x((t == null ? void 0 : t.retryCount) ?? 2, (t == null ? void 0 : t.retryDelay) ?? 1e3);\nclass S {\n  constructor(e) {\n    this.url = e;\n  }\n  /**\n   * Sends a request and returns a response.\n   *\n   * @param {RpcRequest} request - The request to send.\n   * @return {Promise<RpcResponse<T>>} - A promise that resolves to the response.\n   */\n  async sendRequest(e) {\n    try {\n      return await k.post(this.url, {\n        body: JSON.stringify(e)\n      });\n    } catch (r) {\n      return p(r.message);\n    }\n  }\n}\nconst _ = (t, e) => {\n  if (!t)\n    throw new Error(e);\n  return t;\n}, E = (t) => t.startsWith(\"0x\") ? t : `0x${t}`, R = (t) => t.startsWith(\"0x\") ? t.slice(2) : t;\nvar c, i, o;\nclass w {\n  constructor(e, r, s = void 0) {\n    h(this, c, void 0);\n    h(this, i, void 0);\n    h(this, o, void 0);\n    l(this, c, e), l(this, o, s), l(this, i, r);\n  }\n  get ok() {\n    return u(this, c);\n  }\n  get error() {\n    return u(this, o);\n  }\n  get val() {\n    return u(this, i);\n  }\n}\nc = new WeakMap(), i = new WeakMap(), o = new WeakMap();\nconst W = (t) => new w(!0, t), O = void 0, b = (t, ...e) => {\n  if (typeof t == \"string\" && e && e.length > 0) {\n    let r = [t, ...e].map((s) => {\n      if (s) {\n        if (s instanceof Error)\n          return s.message;\n        if (typeof s == \"string\")\n          return s;\n        if (typeof s == \"object\")\n          return JSON.stringify(s);\n        if (s != null && s.toString)\n          return s.toString();\n      }\n    });\n    return new w(\n      !1,\n      null,\n      r.filter((s) => s !== void 0).join(\" \")\n    );\n  }\n  return new w(!1, null, t);\n};\nasync function P(t, e = \"Failed to execute\") {\n  try {\n    const r = await t();\n    return r instanceof w ? r : W(r);\n  } catch (r) {\n    return b(e + \": \", r);\n  }\n}\nexport {\n  b as Err,\n  k as Fetcher,\n  S as JsonRpc,\n  W as Ok,\n  w as Result,\n  x as Retry,\n  O as Void,\n  _ as ensureVal,\n  P as executeWithTryCatch,\n  p as safeParseJson,\n  d as sleep,\n  R as trim0x,\n  E as with0x\n};\n"],
  "mappings": "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",
  "names": ["import_dist"]
}
