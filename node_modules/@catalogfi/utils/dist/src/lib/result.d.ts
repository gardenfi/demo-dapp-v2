export declare class Result<T, E> {
    #private;
    constructor(ok: boolean, val: T, error?: E | undefined);
    get ok(): boolean;
    get error(): E | undefined;
    get val(): T;
}
export type AsyncResult<T, E> = Promise<Result<T, E>>;
export declare const Ok: <T>(val: T) => Result<T, never>;
export declare const Void: undefined;
/**
 * Constructs an error result with the given error value.
 *
 * If the error value is a string, it can be followed by any number of optional messages which will be concatenated
 */
export declare const Err: <E>(error: E, ...optionalMsg: (E extends string ? any : never)[]) => Result<never, E>;
