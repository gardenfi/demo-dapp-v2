export declare class Fetcher {
    private static _postWithFallback;
    /**
     * Asynchronously sends a POST request to multiple URLs with fallback logic.
     *
     * @param {string[]} input - array of URLs to send the POST request to
     * @param {RequestInit} [init] - optional request initialization options
     * @return {Promise<T>} a Promise that resolves to the parsed response data
     */
    static postWithFallback<T>(input: string[], init?: Request): Promise<T>;
    private static _getWithFallback;
    /**
     * Asynchronously sends a POST request to multiple URLs with fallback mechanism.
     *
     * @param {string[]} input - An array of URLs to retrieve data from.
     * @param {RequestInit} [init] - Optional request options.
     * @return {Promise<T>} A promise that resolves to the retrieved data.
     */
    static getWithFallback<T>(input: string[], init?: Request): Promise<T>;
    private static _get;
    /**
     * Asynchronously retrieves data of type T from the specified URL or RequestInfo, with optional initialization options.
     *
     * @param {RequestInfo | URL} input - The URL or RequestInfo to fetch data from
     * @param {RequestInit} init - Optional initialization options for the fetch request
     * @return {Promise<T>} The retrieved data of type T
     */
    static get<T>(input: RequestInfo | URL, init?: Request): Promise<T>;
    private static _post;
    /**
     * Asynchronously sends a POST request to the specified URL or RequestInfo, with optional initialization options.
     */
    static post<T>(input: RequestInfo | URL, init?: Request): Promise<T>;
    /**
     * Parses the response and returns the result as the specified type.
     *
     * @param {Response} res - the response object to be parsed
     * @return {Promise<T>} the parsed result of type T
     */
    private static parse;
}
type Request = RequestInit & {
    retryCount?: number;
    retryDelay?: number;
};
export {};
