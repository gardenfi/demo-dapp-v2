export interface Storage {
    set: (key: string, value: string) => Promise<void>;
    get: (key: string) => Promise<string | null>;
    remove: (key: string) => Promise<void>;
    clear: () => Promise<void>;
    setInSession: (key: string, value: string) => Promise<void>;
    getFromSession: (key: string) => Promise<string | null>;
    removeFromSession: (key: string) => Promise<void>;
    clearSession: () => Promise<void>;
}
/**
 * Storage implementation for chrome extension
 */
export declare class MemoryStorage implements Storage {
    data: {
        [key: string]: string;
    };
    sessionData: {
        [key: string]: string;
    };
    set(key: string, value: string): Promise<void>;
    get(key: string): Promise<string | null>;
    remove(key: string): Promise<void>;
    clear(): Promise<void>;
    setInSession(key: string, value: string): Promise<void>;
    getFromSession(key: string): Promise<string | null>;
    removeFromSession(key: string): Promise<void>;
    clearSession(): Promise<void>;
}
export declare class ChromeExtensionStorage implements Storage {
    set(key: string, value: string): Promise<void>;
    get(key: string): Promise<string | null>;
    remove(key: string): Promise<void>;
    clear(): Promise<void>;
    setInSession(key: string, value: string): Promise<void>;
    getFromSession(key: string): Promise<string | null>;
    removeFromSession(key: string): Promise<void>;
    clearSession(): Promise<void>;
}
