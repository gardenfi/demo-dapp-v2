import { Storage } from './storage';

export interface IVault<T> {
    lock(data: T, password?: string): Promise<void>;
    unlock(password?: string): Promise<T>;
    changePassword(oldPassword: string, newPassword: string): Promise<void>;
    update(data: T): Promise<void>;
}
export type Metadata = {
    salt: string;
    loginToken: string;
    timestamp: number;
};
/**
 * A Vault is a secure storage for user data.
 *
 * A Storage Implementation must be passed to store the data.
 */
export declare class Vault<T> implements IVault<T> {
    private _metadata?;
    private _storage;
    static readonly _storageKey = "vault";
    static readonly _storageKeySession = "vault-session";
    constructor(storage: Storage);
    verifyPassword(password: string): Promise<boolean>;
    lock(data: T, password?: string): Promise<void>;
    unlock(password?: string): Promise<T>;
    changePassword(oldPassword: string, newPassword: string): Promise<void>;
    update(data: Partial<T>): Promise<void>;
    private updateStorage;
    private encryptData;
    private updateAndStoreMetadata;
    private storeEncryptedData;
    private getEncryptedData;
    private getLastUsedSalt;
    private getMetadata;
}
