import{BaseError as h}from"./index72.js";import{isHex as A}from"./index75.js";import{pad as f}from"./index71.js";import{assertSize as a}from"./index55.js";import{numberToHex as g}from"./index42.js";const B=new TextEncoder;function T(r,e={}){return typeof r=="number"||typeof r=="bigint"?d(r,e):typeof r=="boolean"?p(r,e):A(r)?u(r,e):l(r,e)}function p(r,e={}){const t=new Uint8Array(1);return t[0]=Number(r),typeof e.size=="number"?(a(t,{size:e.size}),f(t,{size:e.size})):t}const i={zero:48,nine:57,A:65,F:70,a:97,f:102};function b(r){if(r>=i.zero&&r<=i.nine)return r-i.zero;if(r>=i.A&&r<=i.F)return r-(i.A-10);if(r>=i.a&&r<=i.f)return r-(i.a-10)}function u(r,e={}){let t=r;e.size&&(a(t,{size:e.size}),t=f(t,{dir:"right",size:e.size}));let o=t.slice(2);o.length%2&&(o=`0${o}`);const c=o.length/2,z=new Uint8Array(c);for(let n=0,s=0;n<c;n++){const m=b(o.charCodeAt(s++)),y=b(o.charCodeAt(s++));if(m===void 0||y===void 0)throw new h(`Invalid byte sequence ("${o[s-2]}${o[s-1]}" in "${o}").`);z[n]=m*16+y}return z}function d(r,e){const t=g(r,e);return u(t)}function l(r,e={}){const t=B.encode(r);return typeof e.size=="number"?(a(t,{size:e.size}),f(t,{dir:"right",size:e.size})):t}export{p as boolToBytes,u as hexToBytes,d as numberToBytes,l as stringToBytes,T as toBytes};
