import{size as a}from"./index74.js";import{BaseError as t}from"./index72.js";class i extends t{constructor({expectedLength:e,givenLength:r,type:s}){super([`ABI encoding array length mismatch for type ${s}.`,`Expected length: ${e}`,`Given length: ${r}`].join(`
`),{name:"AbiEncodingArrayLengthMismatchError"})}}class o extends t{constructor({expectedSize:e,value:r}){super(`Size of bytes "${r}" (bytes${a(r)}) does not match expected size (bytes${e}).`,{name:"AbiEncodingBytesSizeMismatchError"})}}class c extends t{constructor({expectedLength:e,givenLength:r}){super(["ABI encoding params/values length mismatch.",`Expected length (params): ${e}`,`Given length (values): ${r}`].join(`
`),{name:"AbiEncodingLengthMismatchError"})}}class d extends t{constructor({expectedSize:e,givenSize:r}){super(`Expected bytes${e}, got bytes${r}.`,{name:"BytesSizeMismatchError"})}}class g extends t{constructor(e,{docsPath:r}){super([`Type "${e}" is not a valid encoding type.`,"Please provide a valid ABI type."].join(`
`),{docsPath:r,name:"InvalidAbiEncodingType"})}}class h extends t{constructor(e){super([`Value "${e}" is not a valid array.`].join(`
`),{name:"InvalidArrayError"})}}export{i as AbiEncodingArrayLengthMismatchError,o as AbiEncodingBytesSizeMismatchError,c as AbiEncodingLengthMismatchError,d as BytesSizeMismatchError,g as InvalidAbiEncodingTypeError,h as InvalidArrayError};
