export interface IDogeProvider {
    getTransaction(txHash: string): Promise<DogeTx>;
    getUTXOs(address: string, amount?: number): Promise<DogeUTXO[]>;
    isValidAddress(address: string): Promise<boolean>;
    getNetwork(): DogeNetwork;
    broadcast(txHex: string): Promise<string>;
    suggestFee(address: string, amount: number): Promise<number>;
    getBalance(address: string): Promise<number>;
}
export declare enum DogeNetwork {
    Mainnet = "mainnet",
    Testnet = "testnet"
}
export declare class DogeProvider implements IDogeProvider {
    private network;
    private networkSuffix;
    constructor(network: DogeNetwork);
    getTransaction(txHash: string): Promise<DogeTx>;
    getUTXOs(address: string, amount?: number): Promise<DogeUTXO[]>;
    getFeeRate(): Promise<number>;
    suggestFee(address: string, amount: number): Promise<number>;
    isValidAddress(address: string): Promise<boolean>;
    getBalance(address: string): Promise<number>;
    getNetwork(): DogeNetwork;
    private _getUTXOs;
    broadcast(txHex: string): Promise<string>;
    private getHeaders;
}
export type SoChainResultSuccess<T> = {
    status: 'success';
    data: T;
};
export type SoChainResultFail = {
    status: 'fail';
    data: {
        error_message: string;
    };
};
export type SoChainResult<T> = SoChainResultSuccess<T> | SoChainResultFail;
export type DogeUTXO = {
    hash: string;
    index: number;
    script: string;
    address: string;
    value: string;
    block: number;
    tx_hex: string;
};
export type DogeInputTx = {
    index: number;
    value: string;
    address: string;
    scriptSig: {
        hex?: string;
        asm?: string;
    };
    witness?: string[];
    previous_output: {
        hash: string;
        index: number;
    };
};
export type DogeOutputTx = {
    index: number;
    value: string;
    type: string;
    address: string;
    script: {
        hex: string;
        asm: string;
    };
    spent?: {
        hash: string;
        index: number;
    };
};
export type DogeTx = {
    hash: string;
    confirmations: number;
    size: number;
    vsize: number;
    weight?: number;
    version: number;
    locktime: number;
    block_hash: string;
    block_height: number;
    time: number;
    inputs_n: number;
    inputs_value: string;
    inputs: DogeInputTx[];
    outputs_n: number;
    outputs_value: string;
    outputs: DogeOutputTx[];
    fee: string;
    price: {
        value: string;
        currency: string;
    };
};
