import { Network } from 'bitcoinjs-lib';
import { IDogeProvider } from './provider';

export interface IDogeWallet {
    getAddress(): Promise<string>;
    getNetwork(): Network;
    getBalance(): Promise<number>;
    getPublicKey(): Promise<string>;
    sign(message: string): Promise<string>;
    send(recipient: string, amount: number, fee?: number): Promise<string>;
    spend(script: Buffer, witness: Buffer[], toAddress?: string, nSequence?: number): Promise<string>;
}
export declare class DogeWallet implements IDogeWallet {
    private provider;
    private signer;
    private network;
    constructor(privateKey: string, provider: IDogeProvider);
    getAddress(): Promise<string>;
    getNetwork(): Network;
    getPublicKey(): Promise<string>;
    sign(message: string): Promise<string>;
    getBalance(): Promise<number>;
    private scriptToAddress;
    spend(script: Buffer, witness: Buffer[], toAddress?: string, nSequence?: number): Promise<string>;
    send(recipient: string, amount: number, fee?: number): Promise<string>;
    private getScriptSigP2PKH;
}
