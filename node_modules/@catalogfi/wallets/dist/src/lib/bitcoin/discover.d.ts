import { BitcoinNetwork, BitcoinTx, IBitcoinProvider } from './provider.interface';
import { AddressType } from './multi-key';
import { BIP32Interface } from 'bip32';

/**
 * Note: `transactions` contains a maximum of 10000 records only
 */
type AddressDetailsWithTxn = {
    address: string;
    privateKey: string;
    type: AddressType;
    path: string;
    transactions: BitcoinTx[];
};
export type AddressDetails = Omit<AddressDetailsWithTxn, 'transactions'>;
export declare const generateRootNode: (mnemonic: string, network: BitcoinNetwork) => BIP32Interface;
/**
 * Returns the first child of every address type like p2pkh, p2wpkh,p2wpkh-p2sh etc
 * from the mnemonic.
 */
export declare const getInitialAccounts: (mnemonic: string, provider: IBitcoinProvider, account?: number) => {
    address: string;
    privateKey: string;
    type: AddressType;
    path: string;
}[];
/**
 * Returns the account details for the given address type.
 */
export declare const getAccount: (mnemonic: string, provider: IBitcoinProvider, addressType: AddressType, accountNumber?: number) => {
    address: string;
    privateKey: string;
    type: AddressType;
    path: string;
};
/**
 * For addresses having at least 1 transaction, returns list of address and transaction details.
 * @returns List of addresses with corresponding transaction details.
 * See: https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki#account-discovery
 */
export declare const discover: (mnemonic: string, provider: IBitcoinProvider) => Promise<AddressDetails[]>;
export {};
