import { BitcoinWalletConfig } from './../../bitcoin/wallet.interface';
import { AbstractBitcoinWallet, AddSignature, IBitcoinProvider, Network } from './../../bitcoin';
import { StackElement } from 'bitcoinjs-lib';

/**
 * Bitcoin actions which catalog wallet should support
 */
export declare const BitcoinActions: {
    getAddress: string;
    getBalance: string;
    getPublicKey: string;
    getNetwork: string;
    getWalletConfig: string;
    sign: string;
    send: string;
    spend: string;
};
/**
 * Bitcoin RPC provider
 * Any dapp can use this interface to interact with catalog wallet
 */
export declare class BitcoinRpcProvider extends AbstractBitcoinWallet {
    private readonly connector;
    private constructor();
    /**
     *  Auto-Detects the catalog wallet and returns the provider
     * @returns {Promise<BitcoinRpcProvider>}
     *
     * @throws {Error} If the catalog wallet extension is not found
     */
    static detect(): Promise<BitcoinRpcProvider>;
    getBalance(): Promise<number>;
    getPublicKey(): Promise<string>;
    private getProviderNetwork;
    getNetwork(): Promise<Network>;
    getProvider(): Promise<IBitcoinProvider>;
    signSchnorr(buf: Buffer): Promise<Buffer>;
    send(toAddress: string, amt: number, fee?: number | undefined): Promise<string>;
    spend(script: Buffer, scriptAddress: string, { toAddress, fee, nSequence, unlockScript, witness, }: {
        toAddress?: string | undefined;
        fee?: number | undefined;
        nSequence?: number | undefined;
        witness?: (Buffer | AddSignature)[] | undefined;
        unlockScript?: (AddSignature | StackElement)[] | undefined;
    }): Promise<string>;
    /**
     * This method is not supported in the browsers.
     * @throws {Error} Unsupported method
     */
    walletConfig(): BitcoinWalletConfig;
    getAddress(): Promise<string>;
    sign(hexMsg: string): Promise<string>;
}
