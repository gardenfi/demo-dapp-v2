import{crypto as f}from"./index65.js";import{bytes as i}from"./index37.js";/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */const p=e=>new Uint32Array(e.buffer,e.byteOffset,Math.floor(e.byteLength/4)),w=e=>new DataView(e.buffer,e.byteOffset,e.byteLength),_=(e,n)=>e<<32-n|e>>>n,b=(e,n)=>e<<n|e>>>32-n>>>0,x=new Uint8Array(new Uint32Array([287454020]).buffer)[0]===68,y=e=>e<<24&4278190080|e<<8&16711680|e>>>8&65280|e>>>24&255;function A(e){for(let n=0;n<e.length;n++)e[n]=y(e[n])}const m=Array.from({length:256},(e,n)=>n.toString(16).padStart(2,"0"));function E(e){i(e);let n="";for(let r=0;r<e.length;r++)n+=m[e[r]];return n}const a={_0:48,_9:57,_A:65,_F:70,_a:97,_f:102};function h(e){if(e>=a._0&&e<=a._9)return e-a._0;if(e>=a._A&&e<=a._F)return e-(a._A-10);if(e>=a._a&&e<=a._f)return e-(a._a-10)}function L(e){if(typeof e!="string")throw new Error("hex string expected, got "+typeof e);const n=e.length,r=n/2;if(n%2)throw new Error("padded hex string expected, got unpadded hex of length "+n);const t=new Uint8Array(r);for(let o=0,s=0;o<r;o++,s+=2){const c=h(e.charCodeAt(s)),u=h(e.charCodeAt(s+1));if(c===void 0||u===void 0){const l=e[s]+e[s+1];throw new Error('hex string expected, got non-hex character "'+l+'" at index '+s)}t[o]=c*16+u}return t}function g(e){if(typeof e!="string")throw new Error(`utf8ToBytes expected string, got ${typeof e}`);return new Uint8Array(new TextEncoder().encode(e))}function d(e){return typeof e=="string"&&(e=g(e)),i(e),e}function U(...e){let n=0;for(let t=0;t<e.length;t++){const o=e[t];i(o),n+=o.length}const r=new Uint8Array(n);for(let t=0,o=0;t<e.length;t++){const s=e[t];r.set(s,o),o+=s.length}return r}class B{clone(){return this._cloneInto()}}function T(e){const n=t=>e().update(d(t)).digest(),r=e();return n.outputLen=r.outputLen,n.blockLen=r.blockLen,n.create=()=>e(),n}function V(e=32){if(f&&typeof f.getRandomValues=="function")return f.getRandomValues(new Uint8Array(e));throw new Error("crypto.getRandomValues must be defined")}export{B as Hash,y as byteSwap,A as byteSwap32,E as bytesToHex,U as concatBytes,w as createView,L as hexToBytes,x as isLE,V as randomBytes,b as rotl,_ as rotr,d as toBytes,p as u32,g as utf8ToBytes,T as wrapConstructor};
