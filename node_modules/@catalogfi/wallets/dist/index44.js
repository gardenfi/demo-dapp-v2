import{sha256 as j}from"./index31.js";import{Field as y,mod as h,pow2 as e}from"./index68.js";import{createCurve as M}from"./index69.js";/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */const u=BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"),q=BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"),N=BigInt(1),l=BigInt(2),v=(t,f)=>(t+f/l)/f;function O(t){const f=u,o=BigInt(3),c=BigInt(6),d=BigInt(11),g=BigInt(22),a=BigInt(23),r=BigInt(44),B=BigInt(88),i=t*t*t%f,n=i*i*t%f,I=e(n,o,f)*n%f,s=e(I,o,f)*n%f,x=e(s,l,f)*i%f,p=e(x,d,f)*x%f,b=e(p,g,f)*p%f,k=e(b,r,f)*b%f,S=e(k,B,f)*k%f,C=e(S,r,f)*b%f,F=e(C,o,f)*n%f,G=e(F,a,f)*p%f,P=e(G,c,f)*i%f,w=e(P,l,f);if(!m.eql(m.sqr(w),t))throw new Error("Cannot find square root");return w}const m=y(u,void 0,void 0,{sqrt:O}),E=M({a:BigInt(0),b:BigInt(7),Fp:m,n:q,Gx:BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),Gy:BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),h:BigInt(1),lowS:!0,endo:{beta:BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),splitScalar:t=>{const f=q,o=BigInt("0x3086d221a7d46bcde86c90e49284eb15"),c=-N*BigInt("0xe4437ed6010e88286f547fa90abfe4c3"),d=BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"),g=o,a=BigInt("0x100000000000000000000000000000000"),r=v(g*t,f),B=v(-c*t,f);let i=h(t-r*o-B*d,f),n=h(-r*c-B*g,f);const I=i>a,s=n>a;if(I&&(i=f-i),s&&(n=f-n),i>a||n>a)throw new Error("splitScalar: Endomorphism failed, k="+t);return{k1neg:I,k1:i,k2neg:s,k2:n}}}},j);BigInt(0),E.ProjectivePoint;export{E as secp256k1};
