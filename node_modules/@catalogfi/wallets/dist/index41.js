/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */function h(e){return e instanceof Uint8Array||e!=null&&typeof e=="object"&&e.constructor.name==="Uint8Array"}function l(...e){const r=n=>n,o=(n,t)=>c=>n(t(c)),i=e.map(n=>n.encode).reduceRight(o,r),a=e.map(n=>n.decode).reduce(o,r);return{encode:i,decode:a}}function p(e){return{encode:r=>{if(!Array.isArray(r)||r.length&&typeof r[0]!="number")throw new Error("alphabet.encode input should be an array of numbers");return r.map(o=>{if(o<0||o>=e.length)throw new Error(`Digit index outside alphabet: ${o} (alphabet: ${e.length})`);return e[o]})},decode:r=>{if(!Array.isArray(r)||r.length&&typeof r[0]!="string")throw new Error("alphabet.decode input should be array of strings");return r.map(o=>{if(typeof o!="string")throw new Error(`alphabet.decode: not string element=${o}`);const i=e.indexOf(o);if(i===-1)throw new Error(`Unknown letter: "${o}". Allowed: ${e}`);return i})}}}function g(e=""){if(typeof e!="string")throw new Error("join separator should be string");return{encode:r=>{if(!Array.isArray(r)||r.length&&typeof r[0]!="string")throw new Error("join.encode input should be array of strings");for(let o of r)if(typeof o!="string")throw new Error(`join.encode: non-string input=${o}`);return r.join(e)},decode:r=>{if(typeof r!="string")throw new Error("join.decode input should be string");return r.split(e)}}}function w(e,r,o){if(r<2)throw new Error(`convertRadix: wrong from=${r}, base cannot be less than 2`);if(o<2)throw new Error(`convertRadix: wrong to=${o}, base cannot be less than 2`);if(!Array.isArray(e))throw new Error("convertRadix: data should be array");if(!e.length)return[];let i=0;const a=[],n=Array.from(e);for(n.forEach(t=>{if(t<0||t>=r)throw new Error(`Wrong integer: ${t}`)});;){let t=0,c=!0;for(let s=i;s<n.length;s++){const d=n[s],f=r*t+d;if(!Number.isSafeInteger(f)||r*t/r!==t||f-d!==r*t)throw new Error("convertRadix: carry overflow");t=f%o;const u=Math.floor(f/o);if(n[s]=u,!Number.isSafeInteger(u)||u*o+t!==f)throw new Error("convertRadix: carry overflow");if(c)u?c=!1:i=s;else continue}if(a.push(t),c)break}for(let t=0;t<e.length-1&&e[t]===0;t++)a.push(0);return a.reverse()}function b(e){return{encode:r=>{if(!h(r))throw new Error("radix.encode input should be Uint8Array");return w(Array.from(r),2**8,e)},decode:r=>{if(!Array.isArray(r)||r.length&&typeof r[0]!="number")throw new Error("radix.decode input should be array of numbers");return Uint8Array.from(w(r,e,2**8))}}}function E(e,r){if(typeof r!="function")throw new Error("checksum fn should be function");return{encode(o){if(!h(o))throw new Error("checksum.encode: input should be Uint8Array");const i=r(o).slice(0,e),a=new Uint8Array(o.length+e);return a.set(o),a.set(i,o.length),a},decode(o){if(!h(o))throw new Error("checksum.decode: input should be Uint8Array");const i=o.slice(0,-e),a=r(i).slice(0,e),n=o.slice(-e);for(let t=0;t<e;t++)if(a[t]!==n[t])throw new Error("Invalid checksum");return i}}}const m=e=>l(b(58),p(e),g("")),y=m("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"),A=e=>l(E(4,r=>e(e(r))),y);export{y as base58,A as createBase58check};
