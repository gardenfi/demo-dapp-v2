"use strict";Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const w=require("./index2.cjs"),a=require("@catalogfi/utils"),h=require("./index16.cjs"),r=require("viem"),d=require("./index25.cjs"),l=require("./index26.cjs");class u{newSwap(t){return Promise.resolve(new n(t,this))}chain(){return w.WalletChain.EVM}}class n{constructor(t,e){if(this.swap={...t,contractAddress:t.contractAddress},this.swap.secretHash=a.with0x(this.swap.secretHash),this.swap.secretHash.length!==66)throw new Error(h.EVMHTLCErrors.INVALID_SECRET_HASH);this.wallet=e}async getHTLCContract(){return r.getContract({address:this.swap.contractAddress,abi:d.AtomicSwapABI,client:{public:this.wallet.getPublicClient(),wallet:this.wallet.getSigner(),signer:this.wallet.getSigner()}})}async getERC20Contract(){const t=await(await this.getHTLCContract()).read.token();return r.getContract({address:t,abi:l.ERC20ABI,client:this.wallet.getSigner()})}id(){return this.swap.contractAddress}async init(){let t=this.wallet.getSigner().account;if(!t)throw new Error("Account not found");const e=await this.wallet.getAddress(),s=await this.getERC20Contract();return await s.read.allowance([e,this.swap.contractAddress])<this.swap.amount&&await s.write.approve([this.swap.contractAddress,r.maxUint256],{account:t,chain:this.wallet.getSigner().chain}),(await this.getHTLCContract()).write.initiate([this.swap.recipientAddress.unwrap_evm(),BigInt(this.swap.expiryBlocks),this.swap.amount,this.swap.secretHash],{account:t,chain:this.wallet.getSigner().chain})}async redeem(t){t=a.with0x(t);let e=this.wallet.getSigner().account;if(!e)throw new Error("Account not found");let s=r.sha256(t);const i=this.swap.initiatorAddress,o=this.getOrderId(s,i.unwrap_evm());return(await this.getHTLCContract()).write.redeem([o,t],{account:e,chain:void 0})}getOrderId(t,e){return r.sha256(r.encodeAbiParameters(r.parseAbiParameters(["bytes32","address"]),[t,e]))}async refund(){const t=this.swap.initiatorAddress,e=this.getOrderId(a.with0x(this.swap.secretHash),t.unwrap_evm());return(await this.getHTLCContract()).write.refund([e],{account:t.unwrap_evm(),chain:void 0})}}exports.AbstractEVMWallet=u;exports.EVMHTLC=n;
