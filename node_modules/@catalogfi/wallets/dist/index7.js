import{Connector as m}from"@catalogfi/extension";import{networks as g}from"bitcoinjs-lib";import{number as b,string as o,mixed as v}from"yup";import{AbstractBitcoinWallet as y}from"./index5.js";import{BitcoinNetwork as n}from"./index8.js";import{BitcoinProvider as k}from"./index10.js";import{AddSignature as w}from"./index12.js";const r={getAddress:"btc_getAddress",getBalance:"btc_getBalance",getPublicKey:"btc_getPublicKey",getNetwork:"btc_getNetwork",getWalletConfig:"btc_getWalletConfig",sign:"btc_sign",send:"btc_send",spend:"btc_spend"};class u extends y{constructor(t){super(),this.connector=t}static async detect(){const t=new m;return new u(t)}async getBalance(){const t=await this.connector.send(r.getBalance);return await b().required().validate(t)}async getPublicKey(){const t=await this.connector.send(r.getPublicKey);return await o().required().validate(t)}async getProviderNetwork(){const t=await this.connector.send(r.getNetwork);return v().oneOf([n.Mainnet,n.Testnet,n.Regtest]).required().validate(t)}async getNetwork(){const t=await this.getProviderNetwork();if(t===n.Mainnet)return g.bitcoin;if(t===n.Testnet)return g.testnet;if(t===n.Regtest)return g.regtest;throw new Error("Invalid network from catalog wallet")}async getProvider(){const t=await this.getProviderNetwork();return new k(t)}signSchnorr(t){throw new Error("signSchnorr: Method not supported")}async send(t,i,s){const a=await this.connector.send(r.send,{toAddress:t,amt:i,fee:s});return await o().required().validate(a)}async spend(t,i,{toAddress:s,fee:a,nSequence:f,unlockScript:c,witness:d}){const l=d==null?void 0:d.map(e=>e instanceof w?e.toString():e.toString("hex")),p=c==null?void 0:c.map(e=>{if(e instanceof w)return e.toString();if(e instanceof Buffer)return e.toString("hex");if(typeof e=="number")return"num_"+e.toString();throw new Error("Invalid unlock script")}),h=await this.connector.send(r.spend,{script:t.toString("hex"),scriptAddress:i,witness:l,toAddress:s,fee:a,unlockScript:p,nSequence:f});return await o().required().validate(h)}walletConfig(){throw new Error("Method not supported")}async getAddress(){const t=await this.connector.send(r.getAddress);return await o().required().validate(t)}async sign(t){const i=await this.connector.send(r.sign,{hexMsg:t});return await o().required().validate(i)}}export{r as BitcoinActions,u as BitcoinRpcProvider};
