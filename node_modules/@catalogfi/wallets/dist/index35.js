import{hash as u,exists as r,bytes as H}from"./index37.js";import{Hash as p,toBytes as l}from"./index38.js";class n extends p{constructor(s,i){super(),this.finished=!1,this.destroyed=!1,u(s);const h=l(i);if(this.iHash=s.create(),typeof this.iHash.update!="function")throw new Error("Expected instance of class which extends utils.Hash");this.blockLen=this.iHash.blockLen,this.outputLen=this.iHash.outputLen;const a=this.blockLen,t=new Uint8Array(a);t.set(h.length>a?s.create().update(h).digest():h);for(let e=0;e<t.length;e++)t[e]^=54;this.iHash.update(t),this.oHash=s.create();for(let e=0;e<t.length;e++)t[e]^=106;this.oHash.update(t),t.fill(0)}update(s){return r(this),this.iHash.update(s),this}digestInto(s){r(this),H(s,this.outputLen),this.finished=!0,this.iHash.digestInto(s),this.oHash.update(s),this.oHash.digestInto(s),this.destroy()}digest(){const s=new Uint8Array(this.oHash.outputLen);return this.digestInto(s),s}_cloneInto(s){s||(s=Object.create(Object.getPrototypeOf(this),{}));const{oHash:i,iHash:h,finished:a,destroyed:t,blockLen:e,outputLen:c}=this;return s=s,s.finished=a,s.destroyed=t,s.blockLen=e,s.outputLen=c,s.oHash=i._cloneInto(s.oHash),s.iHash=h._cloneInto(s.iHash),s}destroy(){this.destroyed=!0,this.oHash.destroy(),this.iHash.destroy()}}const d=(o,s,i)=>new n(o,s).update(i).digest();d.create=(o,s)=>new n(o,s);export{n as HMAC,d as hmac};
