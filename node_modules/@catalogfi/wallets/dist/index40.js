import{bitMask as C,numberToBytesLE as N,numberToBytesBE as O,bytesToNumberLE as v,bytesToNumberBE as y,validateObject as j}from"./index67.js";/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */const a=BigInt(0),l=BigInt(1),d=BigInt(2),A=BigInt(3),m=BigInt(4),I=BigInt(5),S=BigInt(8);BigInt(9),BigInt(16);function g(n,t){const e=n%t;return e>=a?e:t+e}function x(n,t,e){if(e<=a||t<a)throw new Error("Expected power/modulo > 0");if(e===l)return a;let o=l;for(;t>a;)t&l&&(o=o*n%e),n=n*n%e,t>>=l;return o}function Z(n,t,e){let o=n;for(;t-- >a;)o*=o,o%=e;return o}function B(n,t){if(n===a||t<=a)throw new Error(`invert: expected positive integers, got n=${n} mod=${t}`);let e=g(n,t),o=t,s=a,u=l;for(;e!==a;){const i=o/e,c=o%e,r=s-u*i;o=e,e=c,s=u,u=r}if(o!==l)throw new Error("invert: does not exist");return g(s,t)}function F(n){const t=(n-l)/d;let e,o,s;for(e=n-l,o=0;e%d===a;e/=d,o++);for(s=d;s<n&&x(s,t,n)!==n-l;s++);if(o===1){const i=(n+l)/m;return function(c,r){const f=c.pow(r,i);if(!c.eql(c.sqr(f),r))throw new Error("Cannot find square root");return f}}const u=(e+l)/d;return function(i,c){if(i.pow(c,t)===i.neg(i.ONE))throw new Error("Cannot find square root");let r=o,f=i.pow(i.mul(i.ONE,s),e),w=i.pow(c,u),h=i.pow(c,e);for(;!i.eql(h,i.ONE);){if(i.eql(h,i.ZERO))return i.ZERO;let E=1;for(let p=i.sqr(h);E<r&&!i.eql(p,i.ONE);E++)p=i.sqr(p);const b=i.pow(f,l<<BigInt(r-E-1));f=i.sqr(b),w=i.mul(w,b),h=i.mul(h,f),r=E}return w}}function L(n){if(n%m===A){const t=(n+l)/m;return function(e,o){const s=e.pow(o,t);if(!e.eql(e.sqr(s),o))throw new Error("Cannot find square root");return s}}if(n%S===I){const t=(n-I)/S;return function(e,o){const s=e.mul(o,d),u=e.pow(s,t),i=e.mul(o,u),c=e.mul(e.mul(i,d),u),r=e.mul(i,e.sub(c,e.ONE));if(!e.eql(e.sqr(r),o))throw new Error("Cannot find square root");return r}}return F(n)}const k=["create","isValid","is0","neg","inv","sqrt","sqr","eql","add","sub","mul","pow","div","addN","subN","mulN","sqrN"];function z(n){const t={ORDER:"bigint",MASK:"bigint",BYTES:"isSafeInteger",BITS:"isSafeInteger"},e=k.reduce((o,s)=>(o[s]="function",o),t);return j(n,e)}function R(n,t,e){if(e<a)throw new Error("Expected power > 0");if(e===a)return n.ONE;if(e===l)return t;let o=n.ONE,s=t;for(;e>a;)e&l&&(o=n.mul(o,s)),s=n.sqr(s),e>>=l;return o}function T(n,t){const e=new Array(t.length),o=t.reduce((u,i,c)=>n.is0(i)?u:(e[c]=u,n.mul(u,i)),n.ONE),s=n.inv(o);return t.reduceRight((u,i,c)=>n.is0(i)?u:(e[c]=n.mul(u,e[c]),n.mul(u,i)),s),e}function $(n,t){const e=t!==void 0?t:n.toString(2).length,o=Math.ceil(e/8);return{nBitLength:e,nByteLength:o}}function D(n,t,e=!1,o={}){if(n<=a)throw new Error(`Expected Field ORDER > 0, got ${n}`);const{nBitLength:s,nByteLength:u}=$(n,t);if(u>2048)throw new Error("Field lengths over 2048 bytes are not supported");const i=L(n),c=Object.freeze({ORDER:n,BITS:s,BYTES:u,MASK:C(s),ZERO:a,ONE:l,create:r=>g(r,n),isValid:r=>{if(typeof r!="bigint")throw new Error(`Invalid field element: expected bigint, got ${typeof r}`);return a<=r&&r<n},is0:r=>r===a,isOdd:r=>(r&l)===l,neg:r=>g(-r,n),eql:(r,f)=>r===f,sqr:r=>g(r*r,n),add:(r,f)=>g(r+f,n),sub:(r,f)=>g(r-f,n),mul:(r,f)=>g(r*f,n),pow:(r,f)=>R(c,r,f),div:(r,f)=>g(r*B(f,n),n),sqrN:r=>r*r,addN:(r,f)=>r+f,subN:(r,f)=>r-f,mulN:(r,f)=>r*f,inv:r=>B(r,n),sqrt:o.sqrt||(r=>i(c,r)),invertBatch:r=>T(c,r),cmov:(r,f,w)=>w?f:r,toBytes:r=>e?N(r,u):O(r,u),fromBytes:r=>{if(r.length!==u)throw new Error(`Fp.fromBytes: expected ${u}, got ${r.length}`);return e?v(r):y(r)}});return Object.freeze(c)}function q(n){if(typeof n!="bigint")throw new Error("field order must be bigint");const t=n.toString(2).length;return Math.ceil(t/8)}function M(n){const t=q(n);return t+Math.ceil(t/2)}function H(n,t,e=!1){const o=n.length,s=q(t),u=M(t);if(o<16||o<u||o>1024)throw new Error(`expected ${u}-1024 bytes of input, got ${o}`);const i=e?y(n):v(n),c=g(i,t-l)+l;return e?N(c,s):O(c,s)}export{D as Field,T as FpInvertBatch,R as FpPow,L as FpSqrt,q as getFieldBytesLength,M as getMinHashLength,B as invert,H as mapHashToField,g as mod,$ as nLength,x as pow,Z as pow2,F as tonelliShanks,z as validateField};
