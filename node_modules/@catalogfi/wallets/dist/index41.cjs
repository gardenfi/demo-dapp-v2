"use strict";Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */function d(e){return e instanceof Uint8Array||e!=null&&typeof e=="object"&&e.constructor.name==="Uint8Array"}function l(...e){const r=t=>t,n=(t,o)=>s=>t(o(s)),i=e.map(t=>t.encode).reduceRight(n,r),c=e.map(t=>t.decode).reduce(n,r);return{encode:i,decode:c}}function g(e){return{encode:r=>{if(!Array.isArray(r)||r.length&&typeof r[0]!="number")throw new Error("alphabet.encode input should be an array of numbers");return r.map(n=>{if(n<0||n>=e.length)throw new Error(`Digit index outside alphabet: ${n} (alphabet: ${e.length})`);return e[n]})},decode:r=>{if(!Array.isArray(r)||r.length&&typeof r[0]!="string")throw new Error("alphabet.decode input should be array of strings");return r.map(n=>{if(typeof n!="string")throw new Error(`alphabet.decode: not string element=${n}`);const i=e.indexOf(n);if(i===-1)throw new Error(`Unknown letter: "${n}". Allowed: ${e}`);return i})}}}function b(e=""){if(typeof e!="string")throw new Error("join separator should be string");return{encode:r=>{if(!Array.isArray(r)||r.length&&typeof r[0]!="string")throw new Error("join.encode input should be array of strings");for(let n of r)if(typeof n!="string")throw new Error(`join.encode: non-string input=${n}`);return r.join(e)},decode:r=>{if(typeof r!="string")throw new Error("join.decode input should be string");return r.split(e)}}}function w(e,r,n){if(r<2)throw new Error(`convertRadix: wrong from=${r}, base cannot be less than 2`);if(n<2)throw new Error(`convertRadix: wrong to=${n}, base cannot be less than 2`);if(!Array.isArray(e))throw new Error("convertRadix: data should be array");if(!e.length)return[];let i=0;const c=[],t=Array.from(e);for(t.forEach(o=>{if(o<0||o>=r)throw new Error(`Wrong integer: ${o}`)});;){let o=0,s=!0;for(let u=i;u<t.length;u++){const a=t[u],h=r*o+a;if(!Number.isSafeInteger(h)||r*o/r!==o||h-a!==r*o)throw new Error("convertRadix: carry overflow");o=h%n;const f=Math.floor(h/n);if(t[u]=f,!Number.isSafeInteger(f)||f*n+o!==h)throw new Error("convertRadix: carry overflow");if(s)f?s=!1:i=u;else continue}if(c.push(o),s)break}for(let o=0;o<e.length-1&&e[o]===0;o++)c.push(0);return c.reverse()}function p(e){return{encode:r=>{if(!d(r))throw new Error("radix.encode input should be Uint8Array");return w(Array.from(r),2**8,e)},decode:r=>{if(!Array.isArray(r)||r.length&&typeof r[0]!="number")throw new Error("radix.decode input should be array of numbers");return Uint8Array.from(w(r,e,2**8))}}}function E(e,r){if(typeof r!="function")throw new Error("checksum fn should be function");return{encode(n){if(!d(n))throw new Error("checksum.encode: input should be Uint8Array");const i=r(n).slice(0,e),c=new Uint8Array(n.length+e);return c.set(n),c.set(i,n.length),c},decode(n){if(!d(n))throw new Error("checksum.decode: input should be Uint8Array");const i=n.slice(0,-e),c=r(i).slice(0,e),t=n.slice(-e);for(let o=0;o<e;o++)if(c[o]!==t[o])throw new Error("Invalid checksum");return i}}}const A=e=>l(p(58),g(e),b("")),y=A("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"),m=e=>l(E(4,r=>e(e(r))),y);exports.base58=y;exports.createBase58check=m;
