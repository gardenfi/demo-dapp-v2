import{versionedHashVersionKzg as w}from"./index103.js";import{InvalidAddressError as n}from"./index52.js";import{BaseError as c}from"./index72.js";import{EmptyBlobError as d,InvalidVersionedHashSizeError as P,InvalidVersionedHashVersionError as I}from"./index104.js";import{InvalidChainIdError as t}from"./index105.js";import{FeeCapTooHighError as h,TipAboveFeeCapError as x}from"./index106.js";import{isAddress as f}from"./index53.js";import{size as F}from"./index74.js";import{slice as p}from"./index107.js";import{hexToNumber as E}from"./index55.js";function G(s){const{authorizationList:e}=s;if(e)for(const a of e){const{contractAddress:r,chainId:o}=a;if(!f(r))throw new n({address:r});if(o<=0)throw new t({chainId:o})}m(s)}function l(s){const{blobVersionedHashes:e}=s;if(e){if(e.length===0)throw new d;for(const a of e){const r=F(a),o=E(p(a,0,1));if(r!==32)throw new P({hash:a,size:r});if(o!==w)throw new I({hash:a,version:o})}}m(s)}function m(s){const{chainId:e,maxPriorityFeePerGas:a,maxFeePerGas:r,to:o}=s;if(e<=0)throw new t({chainId:e});if(o&&!f(o))throw new n({address:o});if(r&&r>2n**256n-1n)throw new h({maxFeePerGas:r});if(a&&r&&a>r)throw new x({maxFeePerGas:r,maxPriorityFeePerGas:a})}function u(s){const{chainId:e,maxPriorityFeePerGas:a,gasPrice:r,maxFeePerGas:o,to:i}=s;if(e<=0)throw new t({chainId:e});if(i&&!f(i))throw new n({address:i});if(a||o)throw new c("`maxFeePerGas`/`maxPriorityFeePerGas` is not a valid EIP-2930 Transaction attribute.");if(r&&r>2n**256n-1n)throw new h({maxFeePerGas:r})}function y(s){const{chainId:e,maxPriorityFeePerGas:a,gasPrice:r,maxFeePerGas:o,to:i}=s;if(i&&!f(i))throw new n({address:i});if(typeof e<"u"&&e<=0)throw new t({chainId:e});if(a||o)throw new c("`maxFeePerGas`/`maxPriorityFeePerGas` is not a valid Legacy Transaction attribute.");if(r&&r>2n**256n-1n)throw new h({maxFeePerGas:r})}export{m as assertTransactionEIP1559,u as assertTransactionEIP2930,l as assertTransactionEIP4844,G as assertTransactionEIP7702,y as assertTransactionLegacy};
