import{BaseError as n}from"./index72.js";function o(t){const a=Object.entries(t).map(([e,r])=>r===void 0||r===!1?null:[e,r]).filter(Boolean),i=a.reduce((e,[r])=>Math.max(e,r.length),0);return a.map(([e,r])=>`  ${`${e}:`.padEnd(i+1)}  ${r}`).join(`
`)}class s extends n{constructor({v:a}){super(`Invalid \`v\` value "${a}". Expected 27 or 28.`,{name:"InvalidLegacyVError"})}}class c extends n{constructor({transaction:a}){super("Cannot infer a transaction type from provided transaction.",{metaMessages:["Provided Transaction:","{",o(a),"}","","To infer the type, either provide:","- a `type` to the Transaction, or","- an EIP-1559 Transaction with `maxFeePerGas`, or","- an EIP-2930 Transaction with `gasPrice` & `accessList`, or","- an EIP-4844 Transaction with `blobs`, `blobVersionedHashes`, `sidecars`, or","- an EIP-7702 Transaction with `authorizationList`, or","- a Legacy Transaction with `gasPrice`"],name:"InvalidSerializableTransactionError"})}}class l extends n{constructor({storageKey:a}){super(`Size for storage key "${a}" is invalid. Expected 32 bytes. Got ${Math.floor((a.length-2)/2)} bytes.`,{name:"InvalidStorageKeySizeError"})}}export{s as InvalidLegacyVError,c as InvalidSerializableTransactionError,l as InvalidStorageKeySizeError,o as prettyPrint};
