import{WalletChain as h}from"./index2.js";import{with0x as r}from"@catalogfi/utils";import{EVMHTLCErrors as d}from"./index16.js";import{getContract as s,maxUint256 as l,sha256 as i,encodeAbiParameters as p,parseAbiParameters as g}from"viem";import{AtomicSwapABI as u}from"./index25.js";import{ERC20ABI as m}from"./index26.js";class C{newSwap(t){return Promise.resolve(new n(t,this))}chain(){return h.EVM}}class n{constructor(t,a){if(this.swap={...t,contractAddress:t.contractAddress},this.swap.secretHash=r(this.swap.secretHash),this.swap.secretHash.length!==66)throw new Error(d.INVALID_SECRET_HASH);this.wallet=a}async getHTLCContract(){return s({address:this.swap.contractAddress,abi:u,client:{public:this.wallet.getPublicClient(),wallet:this.wallet.getSigner(),signer:this.wallet.getSigner()}})}async getERC20Contract(){const t=await(await this.getHTLCContract()).read.token();return s({address:t,abi:m,client:this.wallet.getSigner()})}id(){return this.swap.contractAddress}async init(){let t=this.wallet.getSigner().account;if(!t)throw new Error("Account not found");const a=await this.wallet.getAddress(),e=await this.getERC20Contract();return await e.read.allowance([a,this.swap.contractAddress])<this.swap.amount&&await e.write.approve([this.swap.contractAddress,l],{account:t,chain:this.wallet.getSigner().chain}),(await this.getHTLCContract()).write.initiate([this.swap.recipientAddress.unwrap_evm(),BigInt(this.swap.expiryBlocks),this.swap.amount,this.swap.secretHash],{account:t,chain:this.wallet.getSigner().chain})}async redeem(t){t=r(t);let a=this.wallet.getSigner().account;if(!a)throw new Error("Account not found");let e=i(t);const o=this.swap.initiatorAddress,w=this.getOrderId(e,o.unwrap_evm());return(await this.getHTLCContract()).write.redeem([w,t],{account:a,chain:void 0})}getOrderId(t,a){return i(p(g(["bytes32","address"]),[t,a]))}async refund(){const t=this.swap.initiatorAddress,a=this.getOrderId(r(this.swap.secretHash),t.unwrap_evm());return(await this.getHTLCContract()).write.refund([a],{account:t.unwrap_evm(),chain:void 0})}}export{C as AbstractEVMWallet,n as EVMHTLC};
