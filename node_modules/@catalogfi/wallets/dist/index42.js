import{IntegerOutOfRangeError as b}from"./index70.js";import{pad as f}from"./index71.js";import{assertSize as c}from"./index55.js";const x=Array.from({length:256},(t,e)=>e.toString(16).padStart(2,"0"));function y(t,e={}){return typeof t=="number"||typeof t=="bigint"?p(t,e):typeof t=="string"?z(t,e):typeof t=="boolean"?m(t,e):g(t,e)}function m(t,e={}){const n=`0x${Number(t)}`;return typeof e.size=="number"?(c(n,{size:e.size}),f(n,{size:e.size})):n}function g(t,e={}){let n="";for(let i=0;i<t.length;i++)n+=x[t[i]];const o=`0x${n}`;return typeof e.size=="number"?(c(o,{size:e.size}),f(o,{dir:"right",size:e.size})):o}function p(t,e={}){const{signed:n,size:o}=e,i=BigInt(t);let r;o?n?r=(1n<<BigInt(o)*8n-1n)-1n:r=2n**(BigInt(o)*8n)-1n:typeof t=="number"&&(r=BigInt(Number.MAX_SAFE_INTEGER));const u=typeof r=="bigint"&&n?-r-1n:0;if(r&&i>r||i<u){const s=typeof t=="bigint"?"n":"";throw new b({max:r?`${r}${s}`:void 0,min:`${u}${s}`,signed:n,size:o,value:`${t}${s}`})}const a=`0x${(n&&i<0?(1n<<BigInt(o*8))+BigInt(i):i).toString(16)}`;return o?f(a,{size:o}):a}const $=new TextEncoder;function z(t,e={}){const n=$.encode(t);return g(n,e)}export{m as boolToHex,g as bytesToHex,p as numberToHex,z as stringToHex,y as toHex};
