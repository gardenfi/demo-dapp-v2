"use strict";Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const h=require("./index67.cjs");/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */const g=BigInt(0),c=BigInt(1),w=BigInt(2),j=BigInt(3),v=BigInt(4),S=BigInt(5),y=BigInt(8);BigInt(9);BigInt(16);function d(t,o){const r=t%o;return r>=g?r:o+r}function L(t,o,r){if(r<=g||o<g)throw new Error("Expected power/modulo > 0");if(r===c)return g;let n=c;for(;o>g;)o&c&&(n=n*t%r),t=t*t%r,o>>=c;return n}function p(t,o,r){let n=t;for(;o-- >g;)n*=n,n%=r;return n}function N(t,o){if(t===g||o<=g)throw new Error(`invert: expected positive integers, got n=${t} mod=${o}`);let r=d(t,o),n=o,l=g,u=c;for(;r!==g;){const i=n/r,e=n%r,s=l-u*i;n=r,r=e,l=u,u=s}if(n!==c)throw new Error("invert: does not exist");return d(l,o)}function T(t){const o=(t-c)/w;let r,n,l;for(r=t-c,n=0;r%w===g;r/=w,n++);for(l=w;l<t&&L(l,o,t)!==t-c;l++);if(n===1){const f=(t+c)/v;return function(e,s){const a=e.pow(s,f);if(!e.eql(e.sqr(a),s))throw new Error("Cannot find square root");return a}}const u=(r+c)/w;return function(i,e){if(i.pow(e,o)===i.neg(i.ONE))throw new Error("Cannot find square root");let s=n,a=i.pow(i.mul(i.ONE,l),r),b=i.pow(e,u),B=i.pow(e,r);for(;!i.eql(B,i.ONE);){if(i.eql(B,i.ZERO))return i.ZERO;let q=1;for(let E=i.sqr(B);q<s&&!i.eql(E,i.ONE);q++)E=i.sqr(E);const I=i.pow(a,c<<BigInt(s-q-1));a=i.sqr(I),b=i.mul(b,I),B=i.mul(B,a),s=q}return b}}function x(t){if(t%v===j){const o=(t+c)/v;return function(n,l){const u=n.pow(l,o);if(!n.eql(n.sqr(u),l))throw new Error("Cannot find square root");return u}}if(t%y===S){const o=(t-S)/y;return function(n,l){const u=n.mul(l,w),f=n.pow(u,o),i=n.mul(l,f),e=n.mul(n.mul(i,w),f),s=n.mul(i,n.sub(e,n.ONE));if(!n.eql(n.sqr(s),l))throw new Error("Cannot find square root");return s}}return T(t)}const H=["create","isValid","is0","neg","inv","sqrt","sqr","eql","add","sub","mul","pow","div","addN","subN","mulN","sqrN"];function Z(t){const o={ORDER:"bigint",MASK:"bigint",BYTES:"isSafeInteger",BITS:"isSafeInteger"},r=H.reduce((n,l)=>(n[l]="function",n),o);return h.validateObject(t,r)}function M(t,o,r){if(r<g)throw new Error("Expected power > 0");if(r===g)return t.ONE;if(r===c)return o;let n=t.ONE,l=o;for(;r>g;)r&c&&(n=t.mul(n,l)),l=t.sqr(l),r>>=c;return n}function _(t,o){const r=new Array(o.length),n=o.reduce((u,f,i)=>t.is0(f)?u:(r[i]=u,t.mul(u,f)),t.ONE),l=t.inv(n);return o.reduceRight((u,f,i)=>t.is0(f)?u:(r[i]=t.mul(u,r[i]),t.mul(u,f)),l),r}function $(t,o){const r=o!==void 0?o:t.toString(2).length,n=Math.ceil(r/8);return{nBitLength:r,nByteLength:n}}function A(t,o,r=!1,n={}){if(t<=g)throw new Error(`Expected Field ORDER > 0, got ${t}`);const{nBitLength:l,nByteLength:u}=$(t,o);if(u>2048)throw new Error("Field lengths over 2048 bytes are not supported");const f=x(t),i=Object.freeze({ORDER:t,BITS:l,BYTES:u,MASK:h.bitMask(l),ZERO:g,ONE:c,create:e=>d(e,t),isValid:e=>{if(typeof e!="bigint")throw new Error(`Invalid field element: expected bigint, got ${typeof e}`);return g<=e&&e<t},is0:e=>e===g,isOdd:e=>(e&c)===c,neg:e=>d(-e,t),eql:(e,s)=>e===s,sqr:e=>d(e*e,t),add:(e,s)=>d(e+s,t),sub:(e,s)=>d(e-s,t),mul:(e,s)=>d(e*s,t),pow:(e,s)=>M(i,e,s),div:(e,s)=>d(e*N(s,t),t),sqrN:e=>e*e,addN:(e,s)=>e+s,subN:(e,s)=>e-s,mulN:(e,s)=>e*s,inv:e=>N(e,t),sqrt:n.sqrt||(e=>f(i,e)),invertBatch:e=>_(i,e),cmov:(e,s,a)=>a?s:e,toBytes:e=>r?h.numberToBytesLE(e,u):h.numberToBytesBE(e,u),fromBytes:e=>{if(e.length!==u)throw new Error(`Fp.fromBytes: expected ${u}, got ${e.length}`);return r?h.bytesToNumberLE(e):h.bytesToNumberBE(e)}});return Object.freeze(i)}function m(t){if(typeof t!="bigint")throw new Error("field order must be bigint");const o=t.toString(2).length;return Math.ceil(o/8)}function C(t){const o=m(t);return o+Math.ceil(o/2)}function k(t,o,r=!1){const n=t.length,l=m(o),u=C(o);if(n<16||n<u||n>1024)throw new Error(`expected ${u}-1024 bytes of input, got ${n}`);const f=r?h.bytesToNumberBE(t):h.bytesToNumberLE(t),i=d(f,o-c)+c;return r?h.numberToBytesLE(i,l):h.numberToBytesBE(i,l)}exports.Field=A;exports.FpInvertBatch=_;exports.FpPow=M;exports.FpSqrt=x;exports.getFieldBytesLength=m;exports.getMinHashLength=C;exports.invert=N;exports.mapHashToField=k;exports.mod=d;exports.nLength=$;exports.pow=L;exports.pow2=p;exports.tonelliShanks=T;exports.validateField=Z;
